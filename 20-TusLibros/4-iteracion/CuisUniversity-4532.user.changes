

----STARTUP---- (5 July 2021 16:42:49) as /Users/ecerdeira/Desktop/ST limpio/CuisUniversity-4532.image!


----QUIT----(5 July 2021 16:56:17) CuisUniversity-4532.image priorSource: 21187682!

----STARTUP---- (6 July 2021 19:40:38) as /Users/ecerdeira/Desktop/ST limpio/CuisUniversity-4532.image!


!classRemoval: #ActiveVariable stamp: 'ENC 7/6/2021 19:41:03'!
ProtoObject subclass: #ActiveVariable
	instanceVariableNames: 'value observers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverStatusWindow stamp: 'ENC 7/6/2021 19:41:03'!
Object subclass: #MarsRoverStatusWindow
	instanceVariableNames: 'marsRover positionTextFieldModel headTextFieldModel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverLog stamp: 'ENC 7/6/2021 19:41:03'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'loggingStream'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverHeadingWest stamp: 'ENC 7/6/2021 19:41:03'!
MarsRoverHeading subclass: #MarsRoverHeadingWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverHeadingSouth stamp: 'ENC 7/6/2021 19:41:03'!
MarsRoverHeading subclass: #MarsRoverHeadingSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverHeadingNorth stamp: 'ENC 7/6/2021 19:41:03'!
MarsRoverHeading subclass: #MarsRoverHeadingNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverHeadingEast stamp: 'ENC 7/6/2021 19:41:03'!
MarsRoverHeading subclass: #MarsRoverHeadingEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverHeading stamp: 'ENC 7/6/2021 19:41:03'!
Object subclass: #MarsRoverHeading
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRover stamp: 'ENC 7/6/2021 19:41:03'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverTest stamp: 'ENC 7/6/2021 19:41:03'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

!classRemoval: #MarsRoverObserversTest stamp: 'ENC 7/6/2021 19:41:03'!
TestCase subclass: #MarsRoverObserversTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-Observer'!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientErrorWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:45:42' prior: 50992367!
initializeWith: aWindowTitle message: anErrorMessage 

	errorMessage := anErrorMessage. 

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientErrorWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:49:42' prior: 50991994 overrides: 50973325!
buildMorphicWindow
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;	
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: ''.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:50:38' prior: 50993878 overrides: 50973325!
buildMorphicWindow
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:50:46' prior: 50993887 overrides: 50973325!
buildMorphicWindow
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:50:59'!
buildCartColumn

	| column catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	column := LayoutMorph newColumn.
	column separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph.
		
	^ column.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:51:28' prior: 50993905!
buildCartColumn

	| column catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	column := LayoutMorph newColumn.
	column separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: catalogListMorph.
		
	^ column.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:52:20' prior: 50991933!
buildCatalogColumn

	| column catalogListMorph catalogAddButton |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	catalogAddButton := PluggableButtonMorph. 
		
	column := LayoutMorph newColumn.
	column separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: catalogAddButton.
		
	^ column.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:53:19' prior: 50993940!
buildCatalogColumn

	| column catalogListMorph catalogAddButton |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	column := LayoutMorph newColumn.
	column separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: catalogAddButton.
		
	^ column.! !

client := TusLibrosClientLoginWindow open.
!

client := TusLibrosClientLoginWindow open.
!

Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'catalog catalogIndex restInterface cart cartIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientCatalogWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 19:55:18'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'catalog catalogIndex restInterface cart cartIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:55:28'!
cartListIndex
	
	^ cartIndex ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:55:42'!
cartListIndex: anIndex
	
	cartIndex := anIndex! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:55:51'!
cart

	^ cart! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:56:04'!
addBookToCart! !

client := TusLibrosClientLoginWindow open.
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:58:08' prior: 50993961!
buildCatalogColumn

	| column catalogListMorph catalogAddButton |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	"catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
	"	
	column := LayoutMorph newColumn.
	column separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	"addMorph: catalogAddButton."
		
	^ column.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:58:20' prior: 50993897 overrides: 50973325!
buildMorphicWindow
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn.";
	addMorph: self buildCartColumn."! !

client := TusLibrosClientLoginWindow open.
!

!methodRemoval: TusLibrosClientCatalogWindowModel #addBookToCart stamp: 'ENC 7/6/2021 19:59:01'!
addBookToCart!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:59:21' prior: 50994061!
buildCatalogColumn

	| column catalogListMorph catalogAddButton |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	"catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
	"	
	column := LayoutMorph newColumn.
	column separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph.";
	addMorph: catalogAddButton."
		
	^ column.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 19:59:56' prior: 50994099!
buildCatalogColumn

	| column catalogListMorph catalogAddButton |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	column := LayoutMorph newColumn.
	column separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: catalogAddButton.
		
	^ column.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:00:16'!
addBookToCart! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:00:53' prior: 50994085 overrides: 50973325!
buildMorphicWindow
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:01:28' prior: 50993923!
buildCartColumn

	| cartColumn cartListMorph |
	
	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	cartColumn := LayoutMorph newColumn.
	cartColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph.
		
	^ cartColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:01:37' prior: 50994124!
buildCatalogColumn

	| catalogColumn catalogListMorph catalogAddButton |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: catalogAddButton.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:02:48' prior: 50994163!
buildCartColumn

	| cartColumn |
	
	"cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	"
	cartColumn := LayoutMorph newColumn.
	cartColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart').";
	addMorph: cartListMorph."
		
	^ cartColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:03:39' prior: 50992053 overrides: 16896425!
initialize

	catalog := OrderedCollection with: 'isbn-1' with: 'isbn-2'.
	catalogIndex := 0.
	cart := OrderedCollection new.
	cartIndex := 0.
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:03:42' prior: 50994227 overrides: 16896425!
initialize

	catalog := OrderedCollection with: 'isbn-1' with: 'isbn-2'.
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:03:56' prior: 50994207!
buildCartColumn

	| cartColumn cartListMorph |
	
	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	cartColumn := LayoutMorph newColumn.
	cartColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph.
		
	^ cartColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:05:29' prior: 50994181!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
		
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCatalogAddRow.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:06:48' prior: 50994267!
buildCatalogColumn

	| catalogColumn catalogListMorph catalogAddButton catalogUnitQuantityTextBox |
	
	catalogUnitQuantityTextBox := PluggableButtonMorph.
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogColumn := LayoutMorph newRow.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogUnitQuantityTextBox;
	addMorph: catalogAddButton.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:07:02' prior: 50994287!
buildCatalogColumn

	| catalogAddRow catalogListMorph catalogAddButton catalogUnitQuantityTextBox |
	
	catalogUnitQuantityTextBox := PluggableButtonMorph.
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogUnitQuantityTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:08:04'!
buildCartAddRow

	| catalogAddRow catalogListMorph catalogAddButton catalogUnitQuantityTextBox |
	
	catalogUnitQuantityTextBox := PluggableButtonMorph.
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogUnitQuantityTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:06:48' prior: 50994306!
buildCatalogColumn

	| catalogColumn catalogListMorph catalogAddButton catalogUnitQuantityTextBox |
	
	catalogUnitQuantityTextBox := PluggableButtonMorph.
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogColumn := LayoutMorph newRow.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogUnitQuantityTextBox;
	addMorph: catalogAddButton.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:07:02' prior: 50994343!
buildCatalogColumn

	| catalogAddRow catalogListMorph catalogAddButton catalogUnitQuantityTextBox |
	
	catalogUnitQuantityTextBox := PluggableButtonMorph.
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogUnitQuantityTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:01:37' prior: 50994362!
buildCatalogColumn

	| catalogColumn catalogListMorph catalogAddButton |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: catalogAddButton.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:09:24' prior: 50994381!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:12:59' prior: 50994324!
buildCartAddRow

	| catalogAddRow catalogAddButton catalogUnitQuantityTextBox |
	
	catalogUnitQuantityTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogUnitQuantityTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogUnitQuantityTextBox textMorph acceptContents ] .
	catalogUnitQuantityTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogUnitQuantityTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:13:20' prior: 50994425!
buildCartAddRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !

!classDefinition: #TusLibrosClientCatalogWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 20:14:03'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'catalog catalogIndex restInterface cart cartIndex booksUnits'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:14:02'!
booksUnits: aBooksUnits

	booksUnits := aBooksUnits.
	^true.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:14:13'!
booksUnits

	^ booksUnits.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:15:13' prior: 50994238 overrides: 16896425!
initialize

	catalog := OrderedCollection with: 'isbn-1' with: 'isbn-2'.
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:15:46' prior: 50994452!
buildCartAddRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 25. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:16:04' prior: 50994514!
buildCartAddRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 25; morphHeight: 25. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:16:37' prior: 50994541!
buildCartAddRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50; morphHeight: 25. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:17:43' prior: 50994570!
buildCartAddRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50; morphHeight: 25. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.3;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:17:57' prior: 50994599!
buildCartAddRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50; morphHeight: 25. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:18:10' prior: 50994405!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 2;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:18:31' prior: 50994656!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 50;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:19:10' prior: 50994677!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 1.0;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:19:33' prior: 50994698!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.1;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:19:53' prior: 50994719!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 100;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:20:30' prior: 50994740!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:22:27' prior: 50994761!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 0;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:22:50' prior: 50994781!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCartAddRow.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:23:06'!
buildCartCheckoutRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50; morphHeight: 25. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:23:31'!
buildCatalogAddRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50; morphHeight: 25. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:23:31' prior: 50994802!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCatalogAddRow.
		
	^ catalogColumn.! !

!methodRemoval: TusLibrosClientCatalogWindow #buildCartAddRow stamp: 'ENC 7/6/2021 20:23:31'!
buildCartAddRow

	| catalogAddRow catalogAddButton catalogBooksUnitsTextBox |
	
	catalogBooksUnitsTextBox := TextModelMorph textProvider: self model textGetter: #booksUnits textSetter: #booksUnits:. 
	catalogBooksUnitsTextBox textMorph setProperty: #keyStroke: toValue: [ :key | catalogBooksUnitsTextBox textMorph acceptContents ] .
	catalogBooksUnitsTextBox  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 50; morphHeight: 25. 
	
	catalogAddButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	catalogAddRow := LayoutMorph newRow.
	catalogAddRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: catalogAddButton.
		
	^ catalogAddRow.!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:24:44' prior: 50994821!
buildCartCheckoutRow

	| cartCheckoutRow cartRemoveBookButton catalogBooksUnitsTextBox |
	
	cartRemoveBookButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
	
	catalogBooksUnitsTextBox := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	cartCheckoutRow := LayoutMorph newRow.
	cartCheckoutRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: catalogBooksUnitsTextBox;
	addMorph: cartRemoveBookButton.
		
	^ cartCheckoutRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:24:50' prior: 50994922!
buildCartCheckoutRow

	| cartCheckoutRow cartRemoveBookButton cartCheckoutButton |
	
	cartRemoveBookButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
	
	cartCheckoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Add product to cart'. 
		
	cartCheckoutRow := LayoutMorph newRow.
	cartCheckoutRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: cartCheckoutButton;
	addMorph: cartRemoveBookButton.
		
	^ cartCheckoutRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:25:14' prior: 50994944!
buildCartCheckoutRow

	| cartCheckoutRow cartRemoveBookButton cartCheckoutButton |
	
	cartRemoveBookButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Remove product'. 
	
	cartCheckoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #addBookToCart label: 'Checkout cart'. 
		
	cartCheckoutRow := LayoutMorph newRow.
	cartCheckoutRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: cartCheckoutButton;
	addMorph: cartRemoveBookButton.
		
	^ cartCheckoutRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:25:45' prior: 50994965!
buildCartCheckoutRow

	| cartCheckoutRow cartRemoveBookButton cartCheckoutButton |
	
	cartRemoveBookButton := PluggableButtonMorph model: self model stateGetter: nil action: #removeProduct label: 'Remove product'. 
	
	cartCheckoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #checkoutCart label: 'Checkout cart'. 
		
	cartCheckoutRow := LayoutMorph newRow.
	cartCheckoutRow separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: cartRemoveBookButton;
	addMorph: cartCheckoutButton.
		
	^ cartCheckoutRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:26:20' prior: 50994248!
buildCartColumn

	| cartColumn cartListMorph |
	
	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300.	
	
	cartColumn := LayoutMorph newColumn.
	cartColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartCheckoutRow.
		
	^ cartColumn.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:26:29'!
removeProduct! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:26:34'!
checkoutCart! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:27:14' prior: 50995007!
buildCartColumn

	| cartColumn cartListMorph |
	
	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 500.	
	
	cartColumn := LayoutMorph newColumn.
	cartColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartCheckoutRow.
		
	^ cartColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:27:20' prior: 50994876!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 500.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCatalogAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:27:38' prior: 50995054!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 300.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCatalogAddRow.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:27:43' prior: 50995035!
buildCartColumn

	| cartColumn cartListMorph |
	
	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 300.	
	
	cartColumn := LayoutMorph newColumn.
	cartColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartCheckoutRow.
		
	^ cartColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:36:24'!
buildCatalogWindow
	
	| catalogSection |
	
	catalogSection :=  layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:36:43'!
buildCatalogSection
	
	| catalogSection |
	
	catalogSection :=  layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.! !

!methodRemoval: TusLibrosClientCatalogWindow #buildCatalogWindow stamp: 'ENC 7/6/2021 20:36:43'!
buildCatalogWindow
	
	| catalogSection |
	
	catalogSection :=  layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:36:57' prior: 50995126!
buildCatalogSection
	
	| catalogSection |
	
	catalogSection :=  LayoutMorph newRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.
	
	^ catalogSection.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:37:37' prior: 50994154 overrides: 50973325!
buildMorphicWindow
	
	| historyButton |
	
	historyButton := PluggableButtonMorph. 
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: historyButton;
	addMorph: self buildCatalogSection.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:37:52' prior: 50995156 overrides: 50973325!
buildMorphicWindow
	
	| recordButton |
	
	recordButton := PluggableButtonMorph. 
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: recordButton;
	addMorph: self buildCatalogSection.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:38:16' prior: 50995167 overrides: 50973325!
buildMorphicWindow
	
	| recordButton |
	
	recordButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	self layoutMorph beRow;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: recordButton;
	addMorph: self buildCatalogSection.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:38:25'!
record! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:38:54' prior: 50995178 overrides: 50973325!
buildMorphicWindow
	
	| recordButton |
	
	recordButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: recordButton;
	addMorph: self buildCatalogSection.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:41:01' prior: 50995197 overrides: 50973325!
buildMorphicWindow
	
	| recordButton |
	
	recordButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: recordButton";
	addMorph: self buildCatalogSection."! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:41:29' prior: 50995212 overrides: 50973325!
buildMorphicWindow
	
	| recordButton |
	
	recordButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: recordButton;
	addMorph: self buildCatalogSection.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:41:51' prior: 50995145!
buildCatalogSection
	
	| catalogSection |
	
	catalogSection :=  LayoutMorph newRow.
	catalogSection separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildCatalogColumn;
	addMorph: self buildCartColumn.
	
	^ catalogSection.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:42:17' prior: 50995076!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCatalogAddRow.
		
	^ catalogColumn.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:42:24' prior: 50995097!
buildCartColumn

	| cartColumn cartListMorph |
	
	cartListMorph := PluggableListMorph model: self model listGetter: #cart indexGetter: #cartListIndex indexSetter: #cartListIndex:.
	cartListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	cartColumn := LayoutMorph newColumn.
	cartColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartListMorph;
	addMorph: self buildCartCheckoutRow.
		
	^ cartColumn.! !

client := TusLibrosClientLoginWindow open.
!

Panel subclass: #TusLibrosClientTicketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientTicketWindow category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 20:47:34'!
Panel subclass: #TusLibrosClientTicketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientTicketWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 20:47:45'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientTicketWindow methodsFor: 'nil' stamp: 'ENC 7/6/2021 20:48:04'!
initializeWith: aWindowTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newCartCreated send: #showTusLibroCatalog to: self."! !
!TusLibrosClientTicketWindow methodsFor: 'nil' stamp: 'ENC 7/6/2021 20:48:16' overrides: 50973411!
defaultExtent

	^ 1035@485! !
!TusLibrosClientTicketWindow methodsFor: 'nil' stamp: 'ENC 7/6/2021 20:48:33' overrides: 50973325!
buildMorphicWindow
	
	| recordButton |
	
	recordButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: recordButton;
	addMorph: self buildCatalogSection.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:48:42' prior: 50995340 overrides: 50973325!
buildMorphicWindow
	
	| logoutButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: logoutButton;
	addMorph: self buildCatalogSection.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:49:18' prior: 50995354 overrides: 50973325!
buildMorphicWindow
	
	| logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: logoutButton;
	addMorph: self buildCatalogSection.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:51:00'!
buildAfterTicketActionRow
	
	| afterTicketActionRow logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	afterTicketActionRow :=  LayoutMorph newRow.
	afterTicketActionRow separation: 15;
	axisEdgeWeight: 0;
	addMorph: logoutButton;
	addMorph: newPurchaseButton.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:51:57' prior: 50995381!
buildAfterTicketActionRow
	
	| afterTicketActionRow logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	afterTicketActionRow :=  LayoutMorph newRow.
	afterTicketActionRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: logoutButton;
	addMorph: newPurchaseButton.
	
	^ afterTicketActionRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:52:05' prior: 50995368 overrides: 50973325!
buildMorphicWindow
	
	| logoutButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #record label: 'View user record'. 
	
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: logoutButton;
	addMorph: self buildAfterTicketActionRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:52:37' prior: 50995421 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildTicketRow;
	addMorph: self buildAfterTicketActionRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:52:51'!
buildTicketRow
	
	| afterTicketActionRow logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	afterTicketActionRow :=  LayoutMorph newRow.
	afterTicketActionRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: logoutButton;
	addMorph: newPurchaseButton.
	
	^ afterTicketActionRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:53:00' prior: 50995444!
buildTicketRow
	
	| ticketRow logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: logoutButton;
	addMorph: newPurchaseButton.
	
	^ ticketRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:54:50' prior: 50995464!
buildTicketRow
	
	| ticketRow ticketListMorph |
	
	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 300.	
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Ticket');
	addMorph: ticketListMorph.
	
	^ ticketRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:55:26' prior: 50995435 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildTicketRow;
	addMorph: self buildTotalTicketRow;
	addMorph: self buildAfterTicketActionRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:56:32'!
buildTotalTicketRow
	
	| ticketRow |
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Total:', 12312 asString).
	
	^ ticketRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:57:06' prior: 50995511!
buildTotalTicketRow
	
	| ticketRow |
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Total:', (model totalTicket)).
	
	^ ticketRow.! !
!TusLibrosClientTicketWindowModel methodsFor: 'nil' stamp: 'ENC 7/6/2021 20:57:27'!
totalTicket

	^ '100'.! !

!classDefinition: #TusLibrosClientTicketWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 20:57:47'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: 'ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:57:46'!
ticket

	^ ticket.! !

!classDefinition: #TusLibrosClientTicketWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 20:58:07'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: 'ticket ticketIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:58:05'!
ticketListIndex

	^ ticketIndex.! !
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:58:19'!
ticketListIndex: anIndex

	ticketIndex := anIndex.! !
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:58:25'!
newPurchase! !
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:58:30'!
logout! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:59:24' prior: 50992072!
initializeWith: aWindowTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #checkoutedCart send: #transitionToTicketWindow to: self. 
! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:59:32'!
transitionToTicketWindow

	! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 20:59:51' prior: 50995590!
transitionToTicketWindow

	self closeButtonClicked.
	
	TusLibrosClientTicketWindow open. ! !
!TusLibrosClientTicketWindow class methodsFor: 'no messages' stamp: 'ENC 7/6/2021 21:00:11'!
open

	^ self new initializeWith: 'TusLibros-Service Client Ticket Window'.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:00:21' prior: 50995029!
checkoutCart

	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:00:56' prior: 50995608!
checkoutCart

	self triggerEvent: #newCartCreated with: self.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:01:06' prior: 50995613!
checkoutCart

	self triggerEvent: #checkoutedCart with: self.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:01:47' prior: 50995320!
initializeWith: aWindowTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientTicketWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newCartCreated send: #showTusLibroCatalog to: self."! !
!TusLibrosClientTicketWindowModel methodsFor: 'nil' stamp: 'ENC 7/6/2021 21:02:36' overrides: 16896425!
initialize

	ticket := OrderedCollection with: 'isbn-1 - 25' with: 'isbn-2 - 75'.
	ticketIndex := 0.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:03:26' prior: 50995482!
buildTicketRow
	
	| ticketRow ticketListMorph |
	
	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Ticket');
	addMorph: ticketListMorph.
	
	^ ticketRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:03:33' prior: 50995650!
buildTicketRow
	
	| ticketRow ticketListMorph |
	
	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: ticketListMorph.
	
	^ ticketRow.! !
!TusLibrosClientTicketWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:03:40' prior: 50995501 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Ticket');
	addMorph: self buildTicketRow;
	addMorph: self buildTotalTicketRow;
	addMorph: self buildAfterTicketActionRow.! !

client := TusLibrosClientLoginWindow open.
!

Panel subclass: #TusLibrosClientRecordWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientRecordWindow category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:07:32'!
Panel subclass: #TusLibrosClientRecordWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientRecordWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:07:41'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientRecordWindow stamp: 'ENC 7/6/2021 21:08:04'!
Panel subclass: #TusLibrosClientRecordWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientRecordWindowModel stamp: 'ENC 7/6/2021 21:08:07'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

Panel subclass: #TusLibrosClientRecordWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientRecordWindow category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:08:13'!
Panel subclass: #TusLibrosClientRecordWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

TusLibrosClientRecordWindow class
	instanceVariableNames: ''!

!classDefinition: 'TusLibrosClientRecordWindow class' category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:08:13'!
TusLibrosClientRecordWindow class
	instanceVariableNames: ''!
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:13'!
buildAfterTicketActionRow
	
	| afterTicketActionRow logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	afterTicketActionRow :=  LayoutMorph newRow.
	afterTicketActionRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: logoutButton;
	addMorph: newPurchaseButton.
	
	^ afterTicketActionRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:13' overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Ticket');
	addMorph: self buildTicketRow;
	addMorph: self buildTotalTicketRow;
	addMorph: self buildAfterTicketActionRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:13'!
buildTicketRow
	
	| ticketRow ticketListMorph |
	
	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: ticketListMorph.
	
	^ ticketRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:13'!
buildTotalTicketRow
	
	| ticketRow |
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Total:', (model totalTicket)).
	
	^ ticketRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:13' overrides: 50973411!
defaultExtent

	^ 1035@485! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:13'!
initializeWith: aWindowTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientTicketWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newCartCreated send: #showTusLibroCatalog to: self."! !
!TusLibrosClientRecordWindow class methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:13'!
open

	^ self new initializeWith: 'TusLibros-Service Client Ticket Window'.! !

Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'ticket ticketIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientRecordWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:08:25'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'ticket ticketIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

TusLibrosClientRecordWindowModel class
	instanceVariableNames: ''!

!classDefinition: 'TusLibrosClientRecordWindowModel class' category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:08:25'!
TusLibrosClientRecordWindowModel class
	instanceVariableNames: ''!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:25' overrides: 16896425!
initialize

	ticket := OrderedCollection with: 'isbn-1 - 25' with: 'isbn-2 - 75'.
	ticketIndex := 0.! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:25'!
logout! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:25'!
newPurchase! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:25'!
ticket

	^ ticket.! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:25'!
ticketListIndex

	^ ticketIndex.! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:25'!
ticketListIndex: anIndex

	ticketIndex := anIndex.! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:25'!
totalTicket

	^ '100'.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:45' prior: 50995822!
initializeWith: aWindowTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientRecordWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	"self model when: #newCartCreated send: #showTusLibroCatalog to: self."! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:08:55' prior: 50995779 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Record');
	addMorph: self buildTicketRow;
	addMorph: self buildTotalTicketRow;
	addMorph: self buildAfterTicketActionRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:10:06' prior: 50995916 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: (LabelMorph contents: 'Record');
	addMorph: self buildRecordRow;
	addMorph: self buildRecordButtonsRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:10:50'!
buildRecordRow
	
	| recordRow recordListMorph |
	
	recordListMorph := PluggableListMorph model: self model listGetter: #record indexGetter: #recordListIndex indexSetter: #recordListIndex:.
	recordListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	recordRow :=  LayoutMorph newRow.
	recordRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: recordListMorph.
	
	^ recordRow.! !

!methodRemoval: TusLibrosClientRecordWindow #buildTicketRow stamp: 'ENC 7/6/2021 21:10:54'!
buildTicketRow
	
	| ticketRow ticketListMorph |
	
	ticketListMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketListIndex indexSetter: #ticketListIndex:.
	ticketListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: ticketListMorph.
	
	^ ticketRow.!

!methodRemoval: TusLibrosClientRecordWindow #buildTotalTicketRow stamp: 'ENC 7/6/2021 21:10:57'!
buildTotalTicketRow
	
	| ticketRow |
	
	ticketRow :=  LayoutMorph newRow.
	ticketRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Total:', (model totalTicket)).
	
	^ ticketRow.!
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:11:14'!
buildRecordButtonsRow
	
	| afterTicketActionRow logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	afterTicketActionRow :=  LayoutMorph newRow.
	afterTicketActionRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: logoutButton;
	addMorph: newPurchaseButton.
	
	^ afterTicketActionRow.! !

!methodRemoval: TusLibrosClientRecordWindow #buildAfterTicketActionRow stamp: 'ENC 7/6/2021 21:11:14'!
buildAfterTicketActionRow
	
	| afterTicketActionRow logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	afterTicketActionRow :=  LayoutMorph newRow.
	afterTicketActionRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: logoutButton;
	addMorph: newPurchaseButton.
	
	^ afterTicketActionRow.!
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:11:32' prior: 50995980!
buildRecordButtonsRow
	
	| recordButtonsRow logoutButton newPurchaseButton |
	
	logoutButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	recordButtonsRow :=  LayoutMorph newRow.
	recordButtonsRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: logoutButton;
	addMorph: newPurchaseButton.
	
	^ recordButtonsRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:11:45' prior: 50996019!
buildRecordButtonsRow
	
	| recordButtonsRow viewRecordButton newPurchaseButton |
	
	viewRecordButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	newPurchaseButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	recordButtonsRow :=  LayoutMorph newRow.
	recordButtonsRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: viewRecordButton;
	addMorph: newPurchaseButton.
	
	^ recordButtonsRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:11:51' prior: 50996038!
buildRecordButtonsRow
	
	| recordButtonsRow viewRecordButton exitButton |
	
	viewRecordButton := PluggableButtonMorph model: self model stateGetter: nil action: #logout label: 'Logout'. 
	exitButton := PluggableButtonMorph model: self model stateGetter: nil action: #newPurchase label: 'New purchase'. 
	
	recordButtonsRow :=  LayoutMorph newRow.
	recordButtonsRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: viewRecordButton;
	addMorph: exitButton.
	
	^ recordButtonsRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:12:14' prior: 50996058!
buildRecordButtonsRow
	
	| recordButtonsRow viewRecordButton exitButton |
	
	viewRecordButton := PluggableButtonMorph model: self model stateGetter: nil action: #viewRecord label: 'View record'. 
	exitButton := PluggableButtonMorph model: self model stateGetter: nil action: #exit label: 'Exit'. 
	
	recordButtonsRow :=  LayoutMorph newRow.
	recordButtonsRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: viewRecordButton;
	addMorph: exitButton.
	
	^ recordButtonsRow.! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:12:27'!
record

	^ ticket.! !

!methodRemoval: TusLibrosClientRecordWindowModel #ticket stamp: 'ENC 7/6/2021 21:12:27'!
ticket

	^ ticket.!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:12:38'!
recordListIndex

	^ ticketIndex.! !

!methodRemoval: TusLibrosClientRecordWindowModel #ticketListIndex stamp: 'ENC 7/6/2021 21:12:38'!
ticketListIndex

	^ ticketIndex.!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:12:47'!
recordListIndex: anIndex

	ticketIndex := anIndex.! !

!methodRemoval: TusLibrosClientRecordWindowModel #ticketListIndex: stamp: 'ENC 7/6/2021 21:12:47'!
ticketListIndex: anIndex

	ticketIndex := anIndex.!

!classDefinition: #TusLibrosClientRecordWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:12:53'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'ticket ticketIndex recordIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:12:52' prior: 50996112!
recordListIndex: anIndex

	recordIndex := anIndex.! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:13:00' prior: 50996103!
recordListIndex

	^ recordIndex.! !

!classDefinition: #TusLibrosClientRecordWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:13:08'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'ticket ticketIndex recordIndex record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:13:07' prior: 50996095!
record

	^ record.! !

!methodRemoval: TusLibrosClientRecordWindowModel #totalTicket stamp: 'ENC 7/6/2021 21:13:11'!
totalTicket

	^ '100'.!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:13:20'!
exit! !

!methodRemoval: TusLibrosClientRecordWindowModel #newPurchase stamp: 'ENC 7/6/2021 21:13:20'!
newPurchase!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:13:30'!
viewRecord! !

!methodRemoval: TusLibrosClientRecordWindowModel #logout stamp: 'ENC 7/6/2021 21:13:30'!
logout!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:13:52' prior: 50995866 overrides: 16896425!
initialize

	record := OrderedCollection with: 'isbn-1 - 25' with: 'isbn-2 - 75'.
	recordIndex := 0.! !

Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'recordIndex record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientRecordWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:13:58'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'recordIndex record'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:14:42' prior: 50995191!
record

	self triggerEvent: #recordRequested with: self.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:15:06' prior: 50995575!
initializeWith: aWindowTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #checkoutedCart send: #transitionToTicketWindow to: self. 
	self model when: #recordRequested send: #transitionToRecordWindow to: self. 

! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:15:19'!
transitionToRecordWindow

	self closeButtonClicked.
	
	TusLibrosClientRecordWindow open. ! !
!TusLibrosClientRecordWindow class methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:15:37' prior: 50995837!
open

	^ self new initializeWith: 'TusLibros-Service Client Record Window'.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:16:56' prior: 50996221!
transitionToRecordWindow
	
	TusLibrosClientRecordWindow open. ! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:17:50' prior: 50996077!
buildRecordButtonsRow
	
	| recordButtonsRow viewRecordButton |
	
	viewRecordButton := PluggableButtonMorph model: self model stateGetter: nil action: #viewRecord label: 'View record'. 
	
	recordButtonsRow :=  LayoutMorph newRow.
	recordButtonsRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: viewRecordButton.
	
	^ recordButtonsRow.! !

!methodRemoval: TusLibrosClientRecordWindowModel #exit stamp: 'ENC 7/6/2021 21:17:55'!
exit!

client := TusLibrosClientLoginWindow open.
!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:20:15' prior: 50996176 overrides: 16896425!
initialize

	record := OrderedCollection with: 'Ticket 128002' with: 'Ticket 156029'.
	recordIndex := 0.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:20:56'!
buildRecordsColumn
	
	| recordButtonsRow viewRecordButton |
	
	viewRecordButton := PluggableButtonMorph model: self model stateGetter: nil action: #viewRecord label: 'View record'. 
	
	recordButtonsRow :=  LayoutMorph newRow.
	recordButtonsRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: viewRecordButton.
	
	^ recordButtonsRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:21:03'!
buildRecordDetailColumn
	
	| recordButtonsRow viewRecordButton |
	
	viewRecordButton := PluggableButtonMorph model: self model stateGetter: nil action: #viewRecord label: 'View record'. 
	
	recordButtonsRow :=  LayoutMorph newRow.
	recordButtonsRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: viewRecordButton.
	
	^ recordButtonsRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:21:13' prior: 50995928 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildRecordRow;
	addMorph: self buildRecordButtonsRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:21:58' prior: 50995938!
buildRecordRow
	
	| recordRow recordListMorph |
	
	recordListMorph := PluggableListMorph model: self model listGetter: #record indexGetter: #recordListIndex indexSetter: #recordListIndex:.
	recordListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	recordRow :=  LayoutMorph newRow.
	recordRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: self buildRecordsColumn;
	addMorph: self buildRecordDetailColumn.
	
	^ recordRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:22:06' prior: 50996308!
buildRecordRow
	
	| recordRow |
	
	recordRow :=  LayoutMorph newRow.
	recordRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: self buildRecordsColumn;
	addMorph: self buildRecordDetailColumn.
	
	^ recordRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:22:23' prior: 50996270!
buildRecordsColumn
	
	| recordButtonsRow viewRecordButton |
	
	viewRecordButton := PluggableButtonMorph model: self model stateGetter: nil action: #viewRecord label: 'View record'. 
	
	recordButtonsRow :=  LayoutMorph newRow.
	recordButtonsRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Record');
	addMorph: viewRecordButton.
	
	^ recordButtonsRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:10:50' prior: 50996327!
buildRecordRow
	
	| recordRow recordListMorph |
	
	recordListMorph := PluggableListMorph model: self model listGetter: #record indexGetter: #recordListIndex indexSetter: #recordListIndex:.
	recordListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	recordRow :=  LayoutMorph newRow.
	recordRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: recordListMorph.
	
	^ recordRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:22:51' prior: 50996354!
buildRecordRow
	
	| recordRow recordListMorph |
	
	
	
	recordRow :=  LayoutMorph newRow.
	recordRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: recordListMorph.
	
	^ recordRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:22:06' prior: 50996371!
buildRecordRow
	
	| recordRow |
	
	recordRow :=  LayoutMorph newRow.
	recordRow separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: self buildRecordsColumn;
	addMorph: self buildRecordDetailColumn.
	
	^ recordRow.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:23:34' prior: 50996338!
buildRecordsColumn
	
	| recordsColumn recordListMorph |
	
	recordListMorph := PluggableListMorph model: self model listGetter: #record indexGetter: #recordListIndex indexSetter: #recordListIndex:.
	recordListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.		
	
	recordsColumn :=  LayoutMorph newColumn.
	recordsColumn separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Record');
	addMorph: recordListMorph.
	
	^ recordsColumn.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:24:14' prior: 50996284!
buildRecordDetailColumn
	
	| recordDetailColumn recordDetailListMorph |
	
	recordDetailListMorph := PluggableListMorph model: self model listGetter: #record indexGetter: #recordListIndex indexSetter: #recordListIndex:.
	recordDetailListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.		
	
	recordDetailColumn :=  LayoutMorph newColumn.
	recordDetailColumn separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Record detail');
	addMorph: recordDetailListMorph.
	
	^ recordDetailColumn.! !
!TusLibrosClientRecordWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:24:31' prior: 50996411!
buildRecordDetailColumn
	
	| recordDetailColumn recordDetailListMorph |
	
	recordDetailListMorph := PluggableListMorph model: self model listGetter: #recordDetail indexGetter: #recordDetailListIndex indexSetter: #recordDetailListIndex:.
	recordDetailListMorph borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.		
	
	recordDetailColumn :=  LayoutMorph newColumn.
	recordDetailColumn separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents: 'Record detail');
	addMorph: recordDetailListMorph.
	
	^ recordDetailColumn.! !

!classDefinition: #TusLibrosClientRecordWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:24:46'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'recordIndex record recordDetail'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:24:45'!
recordDetail

	^ recordDetail.! !

!classDefinition: #TusLibrosClientRecordWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/6/2021 21:24:58'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'recordIndex record recordDetail recordDetailIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:24:56'!
recordDetailListIndex

	^ recordDetailIndex.! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:25:12'!
recordDetailListIndex: anIndex

	recordDetailIndex := anIndex.! !
!TusLibrosClientRecordWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/6/2021 21:25:39' prior: 50996263 overrides: 16896425!
initialize

	record := OrderedCollection with: 'Ticket 128002' with: 'Ticket 156029'.
	recordIndex := 0.
	
	recordDetail := OrderedCollection new.
	recordDetailIndex := 0.! !

client := TusLibrosClientLoginWindow open.
!

----QUIT----(6 July 2021 21:37:14) CuisUniversity-4532.image priorSource: 21187873!

----STARTUP---- (7 July 2021 19:11:09) as /Users/ecerdeira/Desktop/ST limpio/CuisUniversity-4532.image!

!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:15:10'!
buildUsernameRow

	| firstRowLayoutMorph |
		
	usernameTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	usernameTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | usernameTextBoxMorph textMorph acceptContents ] .
	usernameTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 

	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Username:');
	addMorph: usernameTextBoxMorph.
		
	^ firstRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 19:15:10' prior: 50981393 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUsernameRow;
	addMorph: self build2ndRow;
	addMorph: self build3rdRow.! !

!methodRemoval: TusLibrosClientLoginWindow #build1stRow stamp: 'ENC 7/7/2021 19:15:10'!
build1stRow

	| firstRowLayoutMorph |
		
	usernameTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	usernameTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | usernameTextBoxMorph textMorph acceptContents ] .
	usernameTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 

	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Username:');
	addMorph: usernameTextBoxMorph.
		
	^ firstRowLayoutMorph.!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:15:20'!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 19:15:20' prior: 50996528 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUsernameRow;
	addMorph: self buildPasswordRow;
	addMorph: self build3rdRow.! !

!methodRemoval: TusLibrosClientLoginWindow #build2ndRow stamp: 'ENC 7/7/2021 19:15:20'!
build2ndRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:15:35'!
buildCreateCartRow

	| thirdRowLayoutMorph createCartButtonMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createCart  label: 'Create a cart'.
	
	thirdRowLayoutMorph := LayoutMorph newRow.
	thirdRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: createCartButtonMorph.
		
	^ thirdRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 19:15:35' prior: 50996581 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUsernameRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.! !

!methodRemoval: TusLibrosClientLoginWindow #build3rdRow stamp: 'ENC 7/7/2021 19:15:35'!
build3rdRow

	| thirdRowLayoutMorph createCartButtonMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createCart  label: 'Create a cart'.
	
	thirdRowLayoutMorph := LayoutMorph newRow.
	thirdRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: createCartButtonMorph.
		
	^ thirdRowLayoutMorph.!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:16:16' prior: 50996627 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildLogoRow;
	addMorph: self buildUsernameRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:16:51'!
buildLogoRow

	| secondRowLayoutMorph storeLogoMorph |
		
	storeLogoMorph := ImageMorph new.
	storeLogoMorph image: (Form fromBinaryStream: self logo base64Decoded asByteArray readStream).
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: storeLogoMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:17:32'!
logo
	
	^ ''! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:17:46' prior: 50996558!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 50. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:18:16' prior: 50998026!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:18:27' prior: 50996505!
buildUsernameRow

	| firstRowLayoutMorph |
		
	usernameTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	usernameTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | usernameTextBoxMorph textMorph acceptContents ] .
	usernameTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30. 

	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Username:');
	addMorph: usernameTextBoxMorph.
		
	^ firstRowLayoutMorph.! !

TusLibrosServicesRestInterface allInstances.!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:20:26' prior: 50996651 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 5;
	axisEdgeWeight: 0;
	addMorph: self buildLogoRow;
	addMorph: self buildUsernameRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:20:43' prior: 50998049!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:20:49' prior: 50996661!
buildLogoRow

	| secondRowLayoutMorph storeLogoMorph |
		
	storeLogoMorph := ImageMorph new.
	storeLogoMorph image: (Form fromBinaryStream: self logo base64Decoded asByteArray readStream).
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: storeLogoMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:20:55' prior: 50996611!
buildCreateCartRow

	| thirdRowLayoutMorph createCartButtonMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createCart  label: 'Create a cart'.
	
	thirdRowLayoutMorph := LayoutMorph newRow.
	thirdRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: createCartButtonMorph.
		
	^ thirdRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:20:59' prior: 50998072!
buildUsernameRow

	| firstRowLayoutMorph |
		
	usernameTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	usernameTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | usernameTextBoxMorph textMorph acceptContents ] .
	usernameTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30. 

	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Username:');
	addMorph: usernameTextBoxMorph.
		
	^ firstRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'initialization' stamp: 'ENC 7/7/2021 19:21:29' prior: 50980922 overrides: 50973411!
defaultExtent

	^ 1035@685! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'initialization' stamp: 'ENC 7/7/2021 19:22:11' prior: 50998187 overrides: 50973411!
defaultExtent

	^ 1035@585! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:33:08' prior: 50998098 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 5; color: Color white;
	axisEdgeWeight: 0;
	addMorph: self buildLogoRow;
	addMorph: self buildUsernameRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:33:27' prior: 50998201 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 5;
	axisEdgeWeight: 0;
	addMorph: self buildLogoRow;
	addMorph: self buildUsernameRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.! !
!TusLibrosClientLoginWindow methodsFor: 'initialization' stamp: 'ENC 7/7/2021 19:34:19' overrides: 50562969!
defaultColor

	^ Color white! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'initialization' stamp: 'ENC 7/7/2021 19:34:33' prior: 50998225 overrides: 50562969!
defaultColor

	^ `Color white`! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:37:49' prior: 50998214 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	color: Color white;
	separation: 5;
	axisEdgeWeight: 0;
	addMorph: self buildLogoRow;
	addMorph: self buildUsernameRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:38:19' prior: 50998110!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30; color: Color red. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:38:31' prior: 50998250!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30; color: Color white. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:38:51' prior: 50998275!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:40:05' prior: 50998300!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30; color: (Color clipR: 1 g: 1 b: 1). 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!

ColorNamesDict keys!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:42:37' prior: 50998323!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30; color: (Color r: 255 g: 1 b: 1). 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:42:47' prior: 50998349!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30; color: (Color r: 255 g: 255 b: 255). 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:43:11' prior: 50998374!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:43:17' prior: 50998239 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	color: (Color r: 255 g: 255 b: 255);
	separation: 5;
	axisEdgeWeight: 0;
	addMorph: self buildLogoRow;
	addMorph: self buildUsernameRow;
	addMorph: self buildPasswordRow;
	addMorph: self buildCreateCartRow.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:43:44' prior: 50998133!
buildLogoRow

	| secondRowLayoutMorph storeLogoMorph |
		
	storeLogoMorph := ImageMorph new.
	storeLogoMorph image: (Form fromBinaryStream: self logo base64Decoded asByteArray readStream).
	
	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	color: (Color r: 255 g: 255 b: 255);
	axisEdgeWeight: 0.5;
	addMorph: storeLogoMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:43:57' prior: 50998148!
buildCreateCartRow

	| thirdRowLayoutMorph createCartButtonMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createCart  label: 'Create a cart'.
	
	thirdRowLayoutMorph := LayoutMorph newRow.
	thirdRowLayoutMorph separation: 5;
	color: (Color r: 255 g: 255 b: 255);
	axisEdgeWeight: 0.5;
	addMorph: createCartButtonMorph.
		
	^ thirdRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:44:02' prior: 50998399!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30. 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	color: (Color r: 255 g: 255 b: 255);
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:44:06' prior: 50998163!
buildUsernameRow

	| firstRowLayoutMorph |
		
	usernameTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	usernameTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | usernameTextBoxMorph textMorph acceptContents ] .
	usernameTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30. 

	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 5;
	color: (Color r: 255 g: 255 b: 255);
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Username:');
	addMorph: usernameTextBoxMorph.
		
	^ firstRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:44:24' prior: 50998491!
buildUsernameRow

	| firstRowLayoutMorph |
		
	usernameTextBoxMorph := TextModelMorph textProvider: self model textGetter: #userText textSetter: #userText:. 
	usernameTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | usernameTextBoxMorph textMorph acceptContents ] .
	usernameTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30; color: (Color r: 255 g: 255 b: 255). 

	firstRowLayoutMorph := LayoutMorph newRow.
	firstRowLayoutMorph separation: 5;
	color: (Color r: 255 g: 255 b: 255);
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Username:');
	addMorph: usernameTextBoxMorph.
		
	^ firstRowLayoutMorph.! !
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:44:30' prior: 50998467!
buildPasswordRow

	| secondRowLayoutMorph |
		
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #passwordText textSetter: #passwordText:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 30; color: (Color r: 255 g: 255 b: 255). 

	secondRowLayoutMorph := LayoutMorph newRow.
	secondRowLayoutMorph separation: 5;
	color: (Color r: 255 g: 255 b: 255);
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
		
	^ secondRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:45:11' prior: 50998451!
buildCreateCartRow

	| thirdRowLayoutMorph createCartButtonMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createCart  label: 'Create a cart'.
	createCartButtonMorph color: (Color r: 255 g: 255 b: 255).
	
	thirdRowLayoutMorph := LayoutMorph newRow.
	thirdRowLayoutMorph separation: 5;
	color: (Color r: 255 g: 255 b: 255);
	axisEdgeWeight: 0.5;
	addMorph: createCartButtonMorph.
		
	^ thirdRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:46:21' prior: 50998568!
buildCreateCartRow

	| thirdRowLayoutMorph createCartButtonMorph |
	
	createCartButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createCart  label: 'Create a cart'.
	
	thirdRowLayoutMorph := LayoutMorph newRow.
	thirdRowLayoutMorph separation: 5;
	color: (Color r: 255 g: 255 b: 255);
	axisEdgeWeight: 0.5;
	addMorph: createCartButtonMorph.
		
	^ thirdRowLayoutMorph.! !

client := TusLibrosClientLoginWindow open.
!

Object subclass: #TusLibrosServicesRestInterface
	instanceVariableNames: 'webServer port tusLibrosInnerInterface tarjetas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosServicesServer'!

!classDefinition: #TusLibrosServicesRestInterface category: 'TusLibrosServicesServer' stamp: 'ENC 7/7/2021 19:53:04'!
Object subclass: #TusLibrosServicesRestInterface
	instanceVariableNames: 'webServer port tusLibrosInnerInterface tarjetas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosServicesServer'!
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 19:56:30'!
authenticatingWith: aValidUsersAndPasswords
	creditCards: aCreditCards 
	acceptingItemsOf: aCatalog
	registeringOn: aSalesBook
	debitingThrought: aMerchantProcessor
	measuringTimeWith: aClock

	^self new
		initializeAuthenticatingWith: aValidUsersAndPasswords
		crediCards: aCreditCards 
		acceptingItemsOf: aCatalog
		registeringOn: aSalesBook
		debitingThrought: aMerchantProcessor
		measuringTimeWith: aClock! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros-Model' stamp: 'ENC 7/7/2021 19:57:42'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions creditCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'ENC 7/7/2021 19:57:40'!
initializeAuthenticatingWith: aValidUsersAndPasswords
	creditCards: aCreditCards
	acceptingItemsOf: aCatalog
	registeringOn: aSalesBook
	debitingThrought: aMerchantProcessor
	measuringTimeWith: aClock

	validUsersAndPasswords := aValidUsersAndPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	creditCards := aCreditCards. 

	cartSessions := Dictionary new.
	lastId := 0.! !

!methodRemoval: TusLibrosSystemFacade #initializeAuthenticatingWith:acceptingItemsOf:registeringOn:debitingThrought:measuringTimeWith: stamp: 'ENC 7/7/2021 19:57:48'!
initializeAuthenticatingWith: aValidUsersAndPasswords
	acceptingItemsOf: aCatalog
	registeringOn: aSalesBook
	debitingThrought: aMerchantProcessor
	measuringTimeWith: aClock

	validUsersAndPasswords := aValidUsersAndPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.

	cartSessions := Dictionary new.
	lastId := 0.!

!methodRemoval: TusLibrosSystemFacade class #authenticatingWith:acceptingItemsOf:registeringOn:debitingThrought:measuringTimeWith: stamp: 'ENC 7/7/2021 19:57:54'!
authenticatingWith: aValidUsersAndPasswords
	acceptingItemsOf: aCatalog
	registeringOn: aSalesBook
	debitingThrought: aMerchantProcessor
	measuringTimeWith: aClock

	^self new
		initializeAuthenticatingWith: aValidUsersAndPasswords
		acceptingItemsOf: aCatalog
		registeringOn: aSalesBook
		debitingThrought: aMerchantProcessor
		measuringTimeWith: aClock!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 19:58:31'!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 19:58:52' prior: 50990770!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock| aCreditCards |
.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList
		creditCards: aCreditCards 
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosSystemFacadeTest methodsFor: 'setup' stamp: 'ENC 7/7/2021 19:59:06' prior: 50979998 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		creditCards: self aCreditCards
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock
! !
!TusLibrosSystemFacadeTest methodsFor: 'setup' stamp: 'ENC 7/7/2021 20:01:30' prior: 50998778 overrides: 16927572!
setUp

	testObjectsFactory := StoreTestObjectsFactory new.
	clock := ManualClock now: testObjectsFactory today.
	systemFacade := TusLibrosSystemFacade
		authenticatingWith: self validUsersAndPasswords
		creditCards: self creditCards
		acceptingItemsOf: testObjectsFactory defaultCatalog
		registeringOn: self createSalesBook
		debitingThrought: self merchantProcessor
		measuringTimeWith: clock
! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'ENC 7/7/2021 20:01:44'!
creditCards

	^Dictionary new
		at: self validUser put: self validUserPassword;
		yourself! !
!TusLibrosSystemFacadeTest methodsFor: 'test objects' stamp: 'ENC 7/7/2021 20:02:07' prior: 50998811!
creditCards

	^Dictionary new
		at: self validUser put: testObjectsFactory notExpiredCreditCard;
		yourself! !

!classDefinition: 'TusLibrosServicesRestInterface class' category: 'TusLibrosServicesServer' stamp: 'ENC 7/7/2021 20:03:46'!
TusLibrosServicesRestInterface class
	instanceVariableNames: 'tarjetas'!
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:03:43' prior: 50982617!
iniciar: aPort

	| servidor usuarios catalogo reloj |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: ''.
	tarjetas at: 'user' put: ''.
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:04:06' prior: 50998832!
iniciar: aPort

	| servidor usuarios catalogo reloj |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: ''.
	tarjetas at: 'user' put: ''.
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios  
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:04:52'!
with: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook debitingThrought: aMerchantProcessor measuringTimeWith: aClock.

	^ self new initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook debitingThrought: aMerchantProcessor measuringTimeWith: aClock.! !

!methodRemoval: TusLibrosServicesRestInterface class #with:authenticatingWith:acceptingItemsOf:registeringOn:debitingThrought:measuringTimeWith: stamp: 'ENC 7/7/2021 20:04:56'!
with: aPortNumber authenticatingWith: aUserAndPasswordList acceptingItemsOf: aCatalog registeringOn: aSalesBook debitingThrought: aMerchantProcessor measuringTimeWith: aClock.

	^ self new initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList acceptingItemsOf: aCatalog registeringOn: aSalesBook debitingThrought: aMerchantProcessor measuringTimeWith: aClock.!
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:05:07' prior: 50998856!
iniciar: aPort

	| servidor usuarios catalogo reloj |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: ''.
	tarjetas at: 'user' put: ''.
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !

!methodRemoval: TusLibrosServicesRestInterface #initializeWith:authenticatingWith:acceptingItemsOf:registeringOn:debitingThrought:measuringTimeWith: stamp: 'ENC 7/7/2021 20:05:25'!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock| aCreditCards |
.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList
		creditCards: aCreditCards 
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
!
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:06:07' prior: 50998915!
iniciar: aPort

	| servidor usuarios catalogo reloj |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: CreditCard.
	tarjetas at: 'user' put: ''.
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:07:17' prior: 50998980!
iniciar: aPort

	| servidor usuarios catalogo reloj mes today |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	mes := Month month: today monthIndex year: today yearNumber + 1.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: CreditCard.
	tarjetas at: 'user' put: ''.
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:07:47' prior: 50999005!
iniciar: aPort

	| servidor usuarios catalogo reloj mes today |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	mes := Month month: today monthIndex year: today yearNumber + 1.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: (CreditCard expiringOn: mes).
	tarjetas at: 'user' put: (CreditCard expiringOn: mes).
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:07:57' prior: 50999033!
iniciar: aPort

	| servidor usuarios catalogo reloj mesDeExpiracion today |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	mesDeExpiracion := Month month: today monthIndex year: today yearNumber + 1.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: (CreditCard expiringOn: mesDeExpiracion).
	tarjetas at: 'user' put: (CreditCard expiringOn: mesDeExpiracion).
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:08:30' prior: 50999062!
iniciar: aPort

	| servidor usuarios catalogo reloj mesDeExpiracion today |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	today := DateAndTime now.
	mesDeExpiracion := Month month: today monthIndex year: today yearNumber + 1.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: (CreditCard expiringOn: mesDeExpiracion).
	tarjetas at: 'user' put: (CreditCard expiringOn: mesDeExpiracion).
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !

DateAndTime now.!

Month month: DateAndTime now monthIndex year: DateAndTime now yearNumber + 1!
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:09:01' prior: 50999093!
iniciar: aPort

	| servidor usuarios catalogo reloj mesDeExpiracion today |

	catalogo := Dictionary new. 
	catalogo at: 'producto' put: 10.
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	today := DateAndTime now.
	mesDeExpiracion := Month month: today monthIndex year: today yearNumber + 1.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: (CreditCard expiringOn: mesDeExpiracion).
	tarjetas at: 'user' put: (CreditCard expiringOn: mesDeExpiracion).
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !
!Cashier methodsFor: 'checkout - private' stamp: 'ENC 7/7/2021 20:13:18' prior: 50978994!
totalOf: anItem quantity: aQuantity

	^(cart catalog at: anItem) first * aQuantity  ! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'ENC 7/7/2021 20:14:37' prior: 50980342!
defaultCatalog

	^ Dictionary new
		at: self itemSellByTheStore put: (OrderedCollection with: self itemSellByTheStorePrice with: 'La Biblia');
		at: self anotherItemSellByTheStore put: (OrderedCollection with: self anotherItemSellByTheStorePrice with: 'La Torah');
		yourself ! !
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:16:01' prior: 50998622!
authenticatingWith: aValidUsersAndPasswords
	creditCards: aCreditCards 
	acceptingItemsOf: aCatalog
	registeringOn: aSalesBook
	debitingThrought: aMerchantProcessor
	measuringTimeWith: aClock

	^self new
		initializeAuthenticatingWith: aValidUsersAndPasswords
		creditCards: aCreditCards 
		acceptingItemsOf: aCatalog
		registeringOn: aSalesBook
		debitingThrought: aMerchantProcessor
		measuringTimeWith: aClock! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'ENC 7/7/2021 20:16:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'ENC 7/7/2021 20:16:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'ENC 7/7/2021 20:16:13'!
PASSED!
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:17:51' prior: 50999127!
iniciar: aPort

	| servidor usuarios catalogo reloj mesDeExpiracion today |

	catalogo := Dictionary new. 
	catalogo at: 'isbn-1' put: (OrderedCollection with: 10 with: 'El Quinto Elemento').
	catalogo at: 'isbn-1' put: (OrderedCollection with: 1 with: 'La Biblia').
	catalogo at: 'isbn-1' put: (OrderedCollection with: 1 with: 'La Torah').
	catalogo at: 'isbn-1' put: (OrderedCollection with: 50 with: 'Harry Potter 1').
	catalogo at: 'isbn-1' put: (OrderedCollection with: 1000 with: 'T.Cormen').
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	today := DateAndTime now.
	mesDeExpiracion := Month month: today monthIndex year: today yearNumber + 1.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: (CreditCard expiringOn: mesDeExpiracion).
	tarjetas at: 'user' put: (CreditCard expiringOn: mesDeExpiracion).
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !
!TusLibrosClientLoginWindowModel methodsFor: 'PluggableButtonSelectors' stamp: 'ENC 7/7/2021 20:19:10' prior: 50992318!
createCart

	[ 
		cartID := restInterface createCartFor: username with: password.
		self triggerEvent: #newCartCreated with: self.
		
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:20:19' prior: 50991909!
catalog

	[ 
		catalog := restInterface catalog.
		self triggerEvent: #newCartCreated with: self.
		
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:21:16' prior: 50994502 overrides: 16896425!
initialize

	catalog := OrderedCollection new.
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:21:27' prior: 50999326!
catalog

	[ | catalogDictionary | 
		catalogDictionary := restInterface catalog.
		self triggerEvent: #newCartCreated with: self.
		
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:23:52' prior: 50999347!
catalog

	[ | catalogDict | 
		catalogDict := restInterface catalog.
		catalogDict do: [ :isbn |
			
			
		]
		"la clave tiene el ISBN y el second del value tiene el TITULO -> ISBN - TITULO"
		
		
		self triggerEvent: #newCartCreated with: self.
		
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:28:01' prior: 50999358!
catalog

	[ | catalogDict | 
		catalogDict := restInterface catalog.
		catalogDict do: [ :isbn |
			catalog
			
		].
		"la clave tiene el ISBN y el second del value tiene el TITULO -> ISBN - TITULO"
		
		
		self triggerEvent: #newCartCreated with: self.
		
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:30:31' prior: 50999373!
catalog

	| catalogDict | 
	
	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: (isbn, ' - ', (catalogDict at: isbn) second) ].! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:31:13' prior: 50999388!
catalog

	| catalogDict | 
	
	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: (isbn, ' - ', (catalogDict at: isbn) second) ].
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:32:27' prior: 50999337 overrides: 16896425!
initialize

	| catalogDict | 

	catalog := OrderedCollection new.	
	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: (isbn, ' - ', (catalogDict at: isbn) second) ].

	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:32:35' prior: 50999399!
catalog
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8081.
!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 20:36:16' prior: 50982285!
port
	"Use a random port to minimise chances of concurrently running test suites clashing."
	"^ port
		ifNil: [port := (10000 to: 50000) atRandom]"
	
	^ port ifNil: [ port := 8081 ].! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 20:38:01'!
catalog
	| fieldDict |
	
	fieldDict := Dictionary new.
	
	^ self sendRequest: fieldDict to: '/catalog'.! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 20:39:13' prior: 50998700!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[:request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosSystemFacade methodsFor: 'nil' stamp: 'ENC 7/7/2021 20:40:24'!
catalog

	! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:41:06' prior: 50999870!
catalog

	^ catalog	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:41:54' prior: 50999411 overrides: 16896425!
initialize

	catalog := OrderedCollection new.	
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:42:04' prior: 50999426!
catalog
	
	| catalogDict | 

	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: (isbn, ' - ', (catalogDict at: isbn) second) ].
	
	^ catalog! !

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8081.
!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 20:43:48' prior: 50995253!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	"catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	"
	catalogListMorph := TextModelMorph textProvider: self model textGetter: #catalog textSetter: nil. 
	catalogListMorph textMorph setProperty: #keyStroke: toValue: [ :key | catalogListMorph textMorph acceptContents ] .
	catalogListMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300. 
			
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCatalogAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 20:47:29' prior: 50999822!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !

WebUtils jsonEncode: (Dictionary new at: 'isbn-1' put: (OrderedCollection with: 10 with: 'El Quinto Elemento')).!

Dictionary new at: 'isbn-1' put: (OrderedCollection with: 10 with: 'El Quinto Elemento')!

Dictionary newFromPairs: {'isbn-1'. (OrderedCollection with: 10 with: 'El Quinto Elemento')}!

WebUtils jsonEncode: (Dictionary newFromPairs: {'isbn-1'. (OrderedCollection with: 10 with: 'El Quinto Elemento')})!

self isArray!

WebUtils jsonEncode: (Dictionary newFromPairs: {'isbn-1'. (OrderedCollection with: 10 with: 'El Quinto Elemento') asNewArray})!

(OrderedCollection with: 10 with: 'El Quinto Elemento') asNewArray!

self at:1!

self at:0!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 20:47:29' prior: 50999939!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 20:58:17' prior: 51000008!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock
	
	| catalogoo |
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	

	webServer addService: '/catalog' action:[ :request | | catalogAsJson |
		[ 
			"catalog := tusLibrosInnerInterface catalog."
			catalogoo := Dictionary new. 
			catalogoo at: 'isbn-1' put: (OrderedCollection with: 10 with: 'El Quinto Elemento').
			catalogoo at: 'isbn-1' put: (OrderedCollection with: 1 with: 'La Biblia').
			catalogoo at: 'isbn-1' put: (OrderedCollection with: 1 with: 'La Torah').
			catalogoo at: 'isbn-1' put: (OrderedCollection with: 50 with: 'Harry Potter 1').
			catalogoo at: 'isbn-1' put: (OrderedCollection with: 1000 with: 'T.Cormen').
			WebUtils jsonEncode: (catalogoo).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 20:47:29' prior: 51000057!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!Cashier methodsFor: 'checkout - private' stamp: 'ENC 7/7/2021 20:58:49' prior: 50999158!
totalOf: anItem quantity: aQuantity

	^((cart catalog at: anItem) at:1) * aQuantity  ! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'ENC 7/7/2021 20:59:49' prior: 50999164!
defaultCatalog

	^ Dictionary new
		at: self itemSellByTheStore put: (Array braceWith: self itemSellByTheStorePrice with: 'La Biblia');
		at: self anotherItemSellByTheStore put: (Array braceWith: self anotherItemSellByTheStorePrice with: 'La Torah');
		yourself ! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07ListCartOfAnEmptyCartReturnsAnEmptyBag stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CanCheckoutACart stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'ENC 7/7/2021 20:59:52'!
PASSED!
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 21:00:24' prior: 50999272!
iniciar: aPort

	| servidor usuarios catalogo reloj mesDeExpiracion today |

	catalogo := Dictionary new. 
	catalogo at: 'isbn-1' put: (Array braceWith: 10 with: 'El Quinto Elemento').
	catalogo at: 'isbn-1' put: (Array braceWith: 1 with: 'La Biblia').
	catalogo at: 'isbn-1' put: (Array braceWith: 1 with: 'La Torah').
	catalogo at: 'isbn-1' put: (Array braceWith: 50 with: 'Harry Potter 1').
	catalogo at: 'isbn-1' put: (Array braceWith: 1000 with: 'T.Cormen').
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	today := DateAndTime now.
	mesDeExpiracion := Month month: today monthIndex year: today yearNumber + 1.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: (CreditCard expiringOn: mesDeExpiracion).
	tarjetas at: 'user' put: (CreditCard expiringOn: mesDeExpiracion).
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 21:01:22' prior: 50999805!
port
	"Use a random port to minimise chances of concurrently running test suites clashing."
	"^ port
		ifNil: [port := (10000 to: 50000) atRandom]"
	
	^ port ifNil: [ port := 8080 ].! !

TusLibrosServicesRestInterface allInstances.!
!TusLibrosServicesRestInterface class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 21:02:14' prior: 51000256!
iniciar: aPort

	| servidor usuarios catalogo reloj mesDeExpiracion today |

	catalogo := Dictionary new. 
	catalogo at: 'isbn-1' put: (Array braceWith: 10 with: 'El Quinto Elemento').
	catalogo at: 'isbn-2' put: (Array braceWith: 1 with: 'La Biblia').
	catalogo at: 'isbn-3' put: (Array braceWith: 1 with: 'La Torah').
	catalogo at: 'isbn-4' put: (Array braceWith: 50 with: 'Harry Potter 1').
	catalogo at: 'isbn-5' put: (Array braceWith: 1000 with: 'T.Cormen').
	
	usuarios := Dictionary new. 
	usuarios at: 'elias' put: 'cerdeira'.
	usuarios at: 'user' put: 'pass'.
	
	today := DateAndTime now.
	mesDeExpiracion := Month month: today monthIndex year: today yearNumber + 1.
	
	tarjetas := Dictionary new.
	tarjetas at: 'elias' put: (CreditCard expiringOn: mesDeExpiracion).
	tarjetas at: 'user' put: (CreditCard expiringOn: mesDeExpiracion).
	
	reloj := ManualClock now: Time now.

	servidor := TusLibrosServicesRestInterface 
				with: aPort 
				authenticatingWith: usuarios 
				creditCards: tarjetas 
				acceptingItemsOf: catalogo 
				registeringOn: OrderedCollection new 
				debitingThrought: TusLibrosSystemFacadeTest new 
				measuringTimeWith: reloj.

	^ servidor startListening! !

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 21:04:08' prior: 50999815!
catalog

	| fieldDict |
	
	fieldDict := Dictionary new.
	
	^ self sendRequest: fieldDict to: '/catalog'.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:04:28' prior: 50999890!
catalog
	
	| catalogDict | 

	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: (isbn, ' - ', (catalogDict at: isbn) at: 2) ].
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:05:41' prior: 51000370!
catalog
	
	| catalogDict | 

	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: (isbn, ' - ', (catalogDict at: isbn) at: 2) asString ].
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:06:19' prior: 51000381!
catalog
	
	| catalogDict | 

	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: isbn ].
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:06:39' prior: 51000392!
catalog
	
	| catalogDict | 

	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: 'Hola' ].
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:07:12' prior: 50999880 overrides: 16896425!
initialize

	| catalogDict | 

	catalog := OrderedCollection new.	
	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: 'Hola' ].
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:07:19' prior: 51000402!
catalog
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:07:38' prior: 51000413 overrides: 16896425!
initialize

	| catalogDict | 

	catalog := OrderedCollection new.	
	"catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: 'Hola' ]."
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:08:05' prior: 50999908!
buildCatalogColumn

	| catalogColumn catalogListMorph |
	
	catalogListMorph := PluggableListMorph model: self model listGetter: #catalog indexGetter: #catalogListIndex indexSetter: #catalogListIndex:.
	catalogListMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:300; morphHeight: 200.	
	
	catalogColumn := LayoutMorph newColumn.
	catalogColumn separation: 10;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogListMorph;
	addMorph: self buildCatalogAddRow.
		
	^ catalogColumn.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:08:18' prior: 51000434 overrides: 16896425!
initialize

	| catalogDict | 

	catalog := OrderedCollection new.	
	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: 'Hola' ].
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:09:24' prior: 51000472 overrides: 16896425!
initialize

	 

	catalog := OrderedCollection new.	
	catalog := restInterface catalog keys.
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:12:35' prior: 51000488 overrides: 16896425!
initialize

	 

	catalog := OrderedCollection new.	
	restInterface catalog keysDo: [:key | catalog add: key].
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !

client := TusLibrosClientLoginWindow open.
!

(catalogo at:key) at:2!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:06:39' prior: 51000427!
catalog
	
	| catalogDict | 

	catalogDict := restInterface catalog.
	catalogDict keys do: [ :isbn | catalog add: 'Hola' ].
	
	^ catalog! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:16:11' prior: 51000514!
catalog
	
	| catalogDict | 

	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: 'Hola' ].
	
	^ catalog! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:16:17' prior: 51000500 overrides: 16896425!
initialize

	catalog := OrderedCollection new.	
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:17:00' prior: 51000522!
catalog
	
	| catalogDict catalogo | 

	catalogo := OrderedCollection new.
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: 'Hola' ].
	
	^ catalogo! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:19:30' prior: 51000543!
catalog
	
	| catalogDict catalogo | 

	catalogo := OrderedCollection with: 'hola' with: 'chau'.
	"catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalogo add: 'Hola' ].
	"
	^ catalogo! !

client := TusLibrosClientLoginWindow open.
!

WebUtils jsonDecode: '{"isbn-1": [10, "El Quinto Elemento"], "isbn-2": [1, "La Biblia"], "isbn-3": [1, "La Torah"], "isbn-4": [50, "Harry Potter 1"], "isbn-5": [1000, "T.Cormen"]}'!

self content!

self readStream !

self asString !

WebUtils jsonDecode: self!

(WebUtils jsonDecode: ((resp content) readStream))!

self asString!
!TusLibrosRestInterface methodsFor: 'sending request' stamp: 'ENC 7/7/2021 21:28:01' prior: 50982733!
sendRequest: aParamsDictionary to: anEndpoint

	| resp |
	
	resp := WebClient htmlSubmit: (self url, anEndpoint) fields: aParamsDictionary.
	
	resp isSuccess 
		ifTrue: [ ^ WebUtils jsonDecode: ((resp content) readStream). ] 
		ifFalse: [ ^ self error: resp content ].! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:28:33' prior: 51000554!
catalog
	
	| catalogDict catalogo | 

	catalogo := OrderedCollection new.
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalogo add: 'Hola' ].
	
	^ catalogo! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:29:12' prior: 51000590!
catalog
	
	^ catalog! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:29:51' prior: 51000531 overrides: 16896425!
initialize

	| catalogDict |
	catalog := OrderedCollection new.	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn, ' - ', (catalogDict at: isbn) at: 2) ].
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:30:51' prior: 51000607 overrides: 16896425!
initialize

	| catalogDict |
	
	catalog := OrderedCollection new.	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn, ' - ', ((catalogDict at: isbn) at: 2), ' - $', (catalogDict at: isbn) at: 1) ].
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:31:27' prior: 51000622 overrides: 16896425!
initialize

	| catalogDict |
	
	catalog := OrderedCollection new.	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: 'hola' ].
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:30:51' prior: 51000640 overrides: 16896425!
initialize

	| catalogDict |
	
	catalog := OrderedCollection new.	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn, ' - ', ((catalogDict at: isbn) at: 2), ' - $', (catalogDict at: isbn) at: 1) ].
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:32:21' prior: 51000656 overrides: 16896425!
initialize
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:32:26' prior: 51000601!
catalog
	
	| catalogDict |
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn, ' - ', ((catalogDict at: isbn) at: 2), ' - $', (catalogDict at: isbn) at: 1) ].
	
	^ catalog! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:32:41' prior: 51000683!
catalog
	
	| catalogDict |
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn, ' - ', ((catalogDict at: isbn) at: 2), ' - $', (catalogDict at: isbn) at: 1 asString) ].
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:33:06' prior: 51000694!
catalog
	
	| catalogDict |
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: 'hola' ].
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:32:41' prior: 51000707!
catalog
	
	| catalogDict |
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn, ' - ', ((catalogDict at: isbn) at: 2), ' - $', (catalogDict at: isbn) at: 1 asString) ].
	
	^ catalog! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:34:14' prior: 51000717!
catalog
	
	| catalogDict |
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString) ].
	
	^ catalog! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:35:09' prior: 51000728!
catalog
	
	^ catalog! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:35:29' prior: 51000673 overrides: 16896425!
initialize
	
	| catalogDict |
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString) ].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:35:33' prior: 51000747 overrides: 16896425!
initialize
	
	| catalogDict |
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString) ].! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:37:29' prior: 50994147!
addBookToCart

	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:38:20' prior: 51000764 overrides: 16896425!
initialize
	
	| catalogDict |
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := '1'.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString) ].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:38:54' prior: 51000787 overrides: 16896425!
initialize
	
	| catalogDict |
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString) ].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:39:30' prior: 51000782!
addBookToCart

	| selectedBook unaCantidad |
	restInterface add: unaCantidad of: selectedBook! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:39:37' prior: 51000821!
addBookToCart

	| selectedBook unaCantidad |
	
	restInterface add: unaCantidad of: selectedBook! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:39:42' prior: 51000828!
addBookToCart

	| selectedBook unaCantidad |
	
	restInterface add: unaCantidad of: selectedBook.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:41:55' prior: 51000835!
addBookToCart

	| selectedBook unaCantidad |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	restInterface add: unaCantidad of: selectedBook.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:42:58' prior: 51000842!
addBookToCart

	| selectedBook unaCantidad |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBook := catalog at: catalogIndex.
	
	restInterface add: unaCantidad of: selectedBook.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:44:15' prior: 51000852!
addBookToCart

	| selectedBook unaCantidad |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBook := catalog at: catalogIndex.
	
	restInterface add: unaCantidad of: selectedBook.
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:44:32' prior: 51000864!
addBookToCart

	| selectedBook unaCantidad |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBook := catalog at: catalogIndex.
	
	restInterface add: unaCantidad of: selectedBook.
	cart add: selectedBook.! !
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 21:45:42'!
add: aBooksUnits of: aBookInfo

	| fieldDict urlEncodedPassword urlEncodedUsername |
	
	urlEncodedUsername := self correctlyEncodeSpacesForUrlRequestParameter: aBooksUnits .	
	urlEncodedPassword := self correctlyEncodeSpacesForUrlRequestParameter: aBookInfo.	
	fieldDict := Dictionary newFromPairs: {'username'. urlEncodedUsername. 'password'. urlEncodedPassword. }.
	
	^ self sendRequest: fieldDict to: '/createCart'.! !

client := TusLibrosClientLoginWindow open.
!

!classDefinition: #TusLibrosClientCatalogWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/7/2021 21:48:33'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'catalog catalogIndex restInterface cart cartIndex booksUnits catalogInfo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:48:32' prior: 51000804 overrides: 16896425!
initialize
	
	| catalogDict |
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	catalogInfo := Dictionary new.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | catalog add: (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString) ].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:49:26' prior: 51000918 overrides: 16896425!
initialize
	
	| catalogDict |
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	catalogInfo := Dictionary new.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		catalogInfo at: info put: isbn.	
	].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:50:01' prior: 51000876!
addBookToCart

	| selectedBook unaCantidad selectedBookInfo |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBookInfo := catalog at: catalogIndex.
	selectedBook := catalogInfo at: selectedBookInfo.
	
	restInterface add: unaCantidad of: selectedBook.
	cart add: selectedBook.! !
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 21:52:19' prior: 51000888!
add: aBooksUnits of: aBook

	| fieldDict urlEncodedBooksUnits urlEncodedBook |
	
	urlEncodedBooksUnits := self correctlyEncodeSpacesForUrlRequestParameter: aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	fieldDict := Dictionary newFromPairs: {'username'. urlEncodedBook. 'password'. urlEncodedBooksUnits. }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 21:52:41' prior: 51000970!
add: aBooksUnits of: aBook

	| fieldDict urlEncodedBooksUnits urlEncodedBook |
	
	urlEncodedBooksUnits := self correctlyEncodeSpacesForUrlRequestParameter: aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	fieldDict := Dictionary newFromPairs: {'quantity'. urlEncodedBooksUnits. 'isbn'. urlEncodedBook. }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 21:53:42' prior: 51000119!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | cartIDAsJson isbn password cartID |
		[ 
			isbn := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: isbn authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 21:53:48' prior: 51001004!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | cartIDAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'username').
			quantity := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: isbn authenticatedWith: quantity.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosClientCatalogWindow class methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:55:09'!
openFor: aCartID

	^ self new initializeWith: 'TusLibros-Service Client Catalog Window' for: aCartID.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:55:22'!
initializeWith: aWindowTitle for: aCartID

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #checkoutedCart send: #transitionToTicketWindow to: self. 
	self model when: #recordRequested send: #transitionToRecordWindow to: self. 

! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:55:32' prior: 51001137!
initializeWith: aWindowTitle for: aCartID

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel for: aCartID).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #checkoutedCart send: #transitionToTicketWindow to: self. 
	self model when: #recordRequested send: #transitionToRecordWindow to: self. 

! !
!TusLibrosClientCatalogWindowModel class methodsFor: 'no messages' stamp: 'ENC 7/7/2021 21:55:58'!
for: aCartID

	^ self new initializeFor: aCartID.! !

!classDefinition: #TusLibrosClientCatalogWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/7/2021 21:56:21'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'catalog catalogIndex restInterface cart cartIndex booksUnits catalogInfo cartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:56:20'!
initializeFor: aCartID
	
	| catalogDict |
	
	cartID := aCartID.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	catalogInfo := Dictionary new.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		catalogInfo at: info put: isbn.	
	].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 21:56:45' prior: 51000956!
addBookToCart

	| selectedBook unaCantidad selectedBookInfo |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBookInfo := catalog at: catalogIndex.
	selectedBook := catalogInfo at: selectedBookInfo.
	
	restInterface add: unaCantidad of: selectedBook to: cartID.
	cart add: selectedBook.! !
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 21:56:57'!
add: aBooksUnits of: aBook to: aCartID

	| fieldDict urlEncodedBooksUnits urlEncodedBook |
	
	urlEncodedBooksUnits := self correctlyEncodeSpacesForUrlRequestParameter: aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	fieldDict := Dictionary newFromPairs: {'quantity'. urlEncodedBooksUnits. 'isbn'. urlEncodedBook. }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !

!methodRemoval: TusLibrosRestInterface #add:of: stamp: 'ENC 7/7/2021 21:57:03'!
add: aBooksUnits of: aBook

	| fieldDict urlEncodedBooksUnits urlEncodedBook |
	
	urlEncodedBooksUnits := self correctlyEncodeSpacesForUrlRequestParameter: aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	fieldDict := Dictionary newFromPairs: {'quantity'. urlEncodedBooksUnits. 'isbn'. urlEncodedBook. }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.!
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 21:57:19' prior: 51001224!
add: aBooksUnits of: aBook to: aCartID

	| fieldDict urlEncodedBooksUnits urlEncodedBook urlEncodedCartID |
	
	urlEncodedBooksUnits := self correctlyEncodeSpacesForUrlRequestParameter: aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	urlEncodedCartID := self correctlyEncodeSpacesForUrlRequestParameter: aCartID .
	fieldDict := Dictionary newFromPairs: {'quantity'. urlEncodedBooksUnits. 'isbn'. urlEncodedBook. }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 21:57:39' prior: 51001256!
add: aBooksUnits of: aBook to: aCartID

	| fieldDict urlEncodedBooksUnits urlEncodedBook urlEncodedCartID |
	
	urlEncodedBooksUnits := self correctlyEncodeSpacesForUrlRequestParameter: aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	urlEncodedCartID := self correctlyEncodeSpacesForUrlRequestParameter: aCartID .
	fieldDict := Dictionary newFromPairs: {'quantity'. urlEncodedBooksUnits. 'isbn'. urlEncodedBook. 'cartID'. urlEncodedCartID }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 21:58:22' prior: 51001067!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | cartIDAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity').
			cartID := (request fields at: 'cartID').
			cartID := tusLibrosInnerInterface createCartFor: isbn authenticatedWith: quantity.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 21:59:09' prior: 51001297!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | cartIDAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity').
			cartID := (request fields at: 'cartID').
			cartID := tusLibrosInnerInterface add: quantity of: isbn toCartIdentifiedAs: cartID .
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 22:00:06' prior: 51001362!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | responseAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity').
			cartID := (request fields at: 'cartID').
			tusLibrosInnerInterface add: quantity of: isbn toCartIdentifiedAs: cartID .
			responseAsJson := WebUtils jsonEncode: ('OK').
			request send200Response: (responseAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8081.
!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 22:00:59' prior: 51000303!
port
	"Use a random port to minimise chances of concurrently running test suites clashing."
	"^ port
		ifNil: [port := (10000 to: 50000) atRandom]"
	
	^ port ifNil: [ port := 8082 ].! !

server := TusLibrosServicesRestInterface iniciar: 8082.
!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:01:43' prior: 51001210!
addBookToCart

	"| selectedBook unaCantidad selectedBookInfo |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBookInfo := catalog at: catalogIndex.
	selectedBook := catalogInfo at: selectedBookInfo.
	
	restInterface add: unaCantidad of: selectedBook to: cartID.
	cart add: selectedBook."! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:01:56' prior: 51001512!
addBookToCart

	| selectedBook unaCantidad selectedBookInfo |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBookInfo := catalog at: catalogIndex.
	selectedBook := catalogInfo at: selectedBookInfo.
	
	restInterface add: unaCantidad of: selectedBook to: cartID.
	cart add: selectedBook.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:02:26' prior: 51000936 overrides: 16896425!
initialize
	
	| catalogDict |
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	"catalogInfo := Dictionary new."
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		"catalogInfo at: info put: isbn.	"
	].! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:02:41' prior: 51001529!
addBookToCart

	"| selectedBook unaCantidad selectedBookInfo |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBookInfo := catalog at: catalogIndex.
	selectedBook := catalogInfo at: selectedBookInfo.
	
	restInterface add: unaCantidad of: selectedBook to: cartID.
	cart add: selectedBook."! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientLoginWindow methodsFor: 'initialization' stamp: 'ENC 7/7/2021 22:05:01' prior: 50992101!
transitionToCatalogWindow

	self closeButtonClicked.
	
	TusLibrosClientCatalogWindow open. ! !
!TusLibrosClientLoginWindowModel methodsFor: 'PluggableButtonSelectors' stamp: 'ENC 7/7/2021 22:16:24' prior: 50999315!
createCart

	[ 
		cartID := restInterface createCartFor: username with: password.
		TusLibrosClientCatalogWindow openFor: cartID.
		
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientErrorWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:16:54' prior: 50993862!
initializeWith: aWindowTitle message: anErrorMessage 

	errorMessage := anErrorMessage. 

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.! !

!classRemoval: #TusLibrosClientErrorWindowModel stamp: 'ENC 7/7/2021 22:16:57'!
Panel subclass: #TusLibrosClientErrorWindowModel
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientLoginWindowModel methodsFor: 'PluggableButtonSelectors' stamp: 'ENC 7/7/2021 22:17:05' prior: 51001589!
createCart

	[ 
		cartID := restInterface createCartFor: username with: password.
		TusLibrosClientCatalogWindow openFor: cartID.
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientLoginWindowModel methodsFor: 'PluggableButtonSelectors' stamp: 'ENC 7/7/2021 22:17:26' prior: 51001620!
createCart

	[ 
		cartID := restInterface createCartFor: username with: password.
		TusLibrosClientCatalogWindow openForUser: username with: password for: cartID.
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientLoginWindowModel methodsFor: 'PluggableButtonSelectors' stamp: 'ENC 7/7/2021 22:17:35' prior: 51001631!
createCart

	[ 
		cartID := restInterface createCartFor: username with: password.
		TusLibrosClientCatalogWindow openForUser: username with: password for: cartID.
		
	] on: Error do: [ :anError | self triggerEvent: #creationCartError with: self. ]! !
!TusLibrosClientCatalogWindow class methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:18:19'!
openForUser: aUsername with: aPassword for: aCartID

	^ self new initializeWith: 'TusLibros-Service Client Catalog Window' forUser: aUsername with: aPassword for: aCartID.! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:18:38'!
initializeWith: aWindowTitle forUser: aUsername with: aPassword for: aCartID

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel for: aCartID).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #checkoutedCart send: #transitionToTicketWindow to: self. 
	self model when: #recordRequested send: #transitionToRecordWindow to: self. 

! !

!methodRemoval: TusLibrosClientCatalogWindow class #open stamp: 'ENC 7/7/2021 22:18:51'!
open

	^ self new initializeWith: 'TusLibros-Service Client Catalog Window'.!

!methodRemoval: TusLibrosClientCatalogWindow class #openFor: stamp: 'ENC 7/7/2021 22:18:54'!
openFor: aCartID

	^ self new initializeWith: 'TusLibros-Service Client Catalog Window' for: aCartID.!

!methodRemoval: TusLibrosClientCatalogWindow #initializeWith: stamp: 'ENC 7/7/2021 22:18:58'!
initializeWith: aWindowTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #checkoutedCart send: #transitionToTicketWindow to: self. 
	self model when: #recordRequested send: #transitionToRecordWindow to: self. 

!

!methodRemoval: TusLibrosClientCatalogWindow #initializeWith:for: stamp: 'ENC 7/7/2021 22:18:59'!
initializeWith: aWindowTitle for: aCartID

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel for: aCartID).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #checkoutedCart send: #transitionToTicketWindow to: self. 
	self model when: #recordRequested send: #transitionToRecordWindow to: self. 

!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:19:20' prior: 51001664!
initializeWith: aWindowTitle forUser: aUsername with: aPassword for: aCartID

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aWindowTitle.
	self model: (TusLibrosClientCatalogWindowModel forUser: aUsername with: aPassword for: aCartID).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #checkoutedCart send: #transitionToTicketWindow to: self. 
	self model when: #recordRequested send: #transitionToRecordWindow to: self. 

! !
!TusLibrosClientCatalogWindowModel class methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:19:43'!
forUser: aUsername with: aPassword for: aCartID

	^ self new initializeForUser: aUsername with: aPassword for: aCartID.! !

!methodRemoval: TusLibrosClientCatalogWindowModel class #for: stamp: 'ENC 7/7/2021 22:19:48'!
for: aCartID

	^ self new initializeFor: aCartID.!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:19:55'!
initializeForUser: aUsername with: aPassword for: aCartID
	
	| catalogDict |
	
	cartID := aCartID.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	catalogInfo := Dictionary new.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		catalogInfo at: info put: isbn.	
	].! !

!methodRemoval: TusLibrosClientCatalogWindowModel #initialize stamp: 'ENC 7/7/2021 22:19:58'!
initialize
	
	| catalogDict |
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	"catalogInfo := Dictionary new."
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		"catalogInfo at: info put: isbn.	"
	].!

!methodRemoval: TusLibrosClientCatalogWindowModel #initializeFor: stamp: 'ENC 7/7/2021 22:20:01'!
initializeFor: aCartID
	
	| catalogDict |
	
	cartID := aCartID.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	catalogInfo := Dictionary new.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		catalogInfo at: info put: isbn.	
	].!

!classDefinition: #TusLibrosClientCatalogWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/7/2021 22:20:32'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'catalog catalogIndex restInterface cart cartIndex booksUnits catalogInfo cartID username'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classDefinition: #TusLibrosClientCatalogWindowModel category: 'TusLibrosClient' stamp: 'ENC 7/7/2021 22:20:32'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'catalog catalogIndex restInterface cart cartIndex booksUnits catalogInfo cartID username password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:20:30' prior: 51001761!
initializeForUser: aUsername with: aPassword for: aCartID
	
	| catalogDict |
	
	cartID := aCartID.
	username := aUsername.
	password := aPassword.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	catalogInfo := Dictionary new.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		catalogInfo at: info put: isbn.	
	].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:20:50' prior: 51001566!
addBookToCart

	| selectedBook unaCantidad selectedBookInfo |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBookInfo := catalog at: catalogIndex.
	selectedBook := catalogInfo at: selectedBookInfo.
	
	restInterface add: unaCantidad of: selectedBook to: cartID.
	cart add: selectedBook.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:24:05' prior: 51001844!
initializeForUser: aUsername with: aPassword for: aCartID
	
	| catalogDict |
	
	cartID := aCartID.
	username := aUsername.
	password := aPassword.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	catalogInfo := Dictionary new.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		catalogInfo at: info put: isbn.	
	].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:24:11' prior: 51001867!
addBookToCart

	"| selectedBook unaCantidad selectedBookInfo |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBookInfo := catalog at: catalogIndex.
	selectedBook := catalogInfo at: selectedBookInfo.
	
	restInterface add: unaCantidad of: selectedBook to: cartID.
	cart add: selectedBook."! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:24:45' prior: 51001884!
initializeForUser: aUsername with: aPassword for: aCartID
	
	| catalogDict |
	
	cartID := aCartID.
	username := aUsername.
	password := aPassword.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	"catalogInfo := Dictionary new."
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		"catalogInfo at: info put: isbn."	
	].! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 22:25:24' prior: 51001499!
port
	"Use a random port to minimise chances of concurrently running test suites clashing."
	"^ port
		ifNil: [port := (10000 to: 50000) atRandom]"
	
	^ port ifNil: [ port := 8080 ].! !

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:26:45' prior: 51001907!
addBookToCart

	| selectedBook unaCantidad selectedBookInfo |
	
	(booksUnits = '') ifTrue: [ unaCantidad := 1 ] ifFalse: [ unaCantidad := booksUnits asNumber ].
	
	selectedBookInfo := catalog at: catalogIndex.
	selectedBook := catalogInfo at: selectedBookInfo.
	
	restInterface add: unaCantidad of: selectedBook to: cartID.
	cart add: selectedBook.! !
!TusLibrosClientCatalogWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 22:26:57' prior: 51001922!
initializeForUser: aUsername with: aPassword for: aCartID
	
	| catalogDict |
	
	cartID := aCartID.
	username := aUsername.
	password := aPassword.
	
	cart := OrderedCollection new.
	cartIndex := 0.
	
	booksUnits := ''.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := OrderedCollection new.	
	catalogIndex := 0.
	catalogInfo := Dictionary new.
	
	catalogDict := restInterface catalog.
	catalogDict keysDo: [ :isbn | | info |
		info := (isbn asString, ' - ', ((catalogDict at: isbn) at: 2), ' - $', ((catalogDict at: isbn) at: 1) asString).
		catalog add: info. 
		catalogInfo at: info put: isbn.
	].! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 22:28:55' prior: 51001276!
add: aBooksUnits of: aBook to: aCartID

	| fieldDict urlEncodedBooksUnits urlEncodedBook urlEncodedCartID |
	
	urlEncodedBooksUnits := aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	urlEncodedCartID := self correctlyEncodeSpacesForUrlRequestParameter: aCartID .
	fieldDict := Dictionary newFromPairs: {'quantity'. urlEncodedBooksUnits. 'isbn'. urlEncodedBook. 'cartID'. urlEncodedCartID }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !

client := TusLibrosClientLoginWindow open.
!
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 22:29:41' prior: 51002068!
add: aBooksUnits of: aBook to: aCartID

	| fieldDict urlEncodedBooksUnits urlEncodedBook urlEncodedCartID |
	
	urlEncodedBooksUnits := aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	urlEncodedCartID := aCartID .
	fieldDict := Dictionary newFromPairs: {'quantity'. urlEncodedBooksUnits. 'isbn'. urlEncodedBook. 'cartID'. urlEncodedCartID }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !

server!

TusLibrosServicesRestInterface allInstances.!

client := TusLibrosClientLoginWindow open.
!

self url!
!TusLibrosRestInterface methodsFor: 'sending request' stamp: 'ENC 7/7/2021 22:32:40' prior: 51000576!
sendRequest: aParamsDictionary to: anEndpoint

	| resp |
	
	resp := WebClient htmlSubmit: (self url , anEndpoint) fields: aParamsDictionary.
	
	resp isSuccess 
		ifTrue: [ ^ WebUtils jsonDecode: ((resp content) readStream). ] 
		ifFalse: [ ^ self error: resp content ].! !

WebClient htmlSubmit: (self url , anEndpoint) fields: aParamsDictionary!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 22:40:10' prior: 51001427!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/ping' action: [ :request |	 request send200Response: 'pong'. ].

	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | responseAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity').
			cartID := (request fields at: 'cartID').
			tusLibrosInnerInterface add: quantity asNumber of: isbn toCartIdentifiedAs: cartID asNumber.
			responseAsJson := WebUtils jsonEncode: ('OK').
			request send200Response: (responseAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 22:40:47' prior: 51001947!
port
	"Use a random port to minimise chances of concurrently running test suites clashing."
	"^ port
		ifNil: [port := (10000 to: 50000) atRandom]"
	
	^ port ifNil: [ port := 8081 ].! !

server := TusLibrosServicesRestInterface iniciar: 8081.
!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 22:41:16' prior: 51002255!
port
	"Use a random port to minimise chances of concurrently running test suites clashing."
	"^ port
		ifNil: [port := (10000 to: 50000) atRandom]"
	
	^ port ifNil: [ port := 8080 ].! !

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self destroy!

self first delete!

self first destroy!

self first destroy!

self first destroy!

self first destroy!

self first destroy!

self first destroy!

self second destroy!

self second destroy!

self second destroy!

self second destroy!

self second destroy!

self second destroy!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

1 asNumber!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

TusLibrosServicesRestInterface allInstances.!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosServicesRestInterface methodsFor: 'services' stamp: 'ENC 7/7/2021 22:57:04'!
addService: aServiceName with: aBlock
	
	webServer addService: aServiceName action: [ :request |
		[ | response |
			response := aBlock value: request.
			request send200Response: (WebUtils jsonEncode: response)
		] on: Error do: [ :anError |
			request send400Response: (anError messageText) 
		]
	]! !
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 22:59:16'!
addToCartHandler

	^ [ :request | | cartID isbn quantity store |
		quantity := (request fields at:'quantity').
		isbn := (request fields at:'book').
		cartID := (request fields at:'id').
		
		store add: (quantity asNumber) of: isbn toCartIdentifiedAs: (cartID asNumber).
		
		Dictionary newFromPairs: {'status'.200.}
	]! !
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 22:59:54' prior: 51002361!
addToCartHandler

	^ [ :request | | cartID isbn quantity |
		quantity := (request fields at:'quantity').
		isbn := (request fields at:'book').
		cartID := (request fields at:'id').
		
		tusLibrosInnerInterface add: (quantity asNumber) of: isbn toCartIdentifiedAs: (cartID asNumber).
		
		Dictionary newFromPairs: {'status'.200.}
	]! !
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 23:00:31'!
createCart

	^ [:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	]! !
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 23:01:17' prior: 51002389!
createCart

	^ [:request | | username password cartID | 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartID 
		]! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 23:02:23' prior: 51002125!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' action:[:request | | cartIDAsJson username password cartID |
		[ 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartIDAsJson := WebUtils jsonEncode: (cartID).
			request send200Response: (cartIDAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | responseAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity').
			cartID := (request fields at: 'cartID').
			tusLibrosInnerInterface add: quantity asNumber of: isbn toCartIdentifiedAs: cartID asNumber.
			responseAsJson := WebUtils jsonEncode: ('OK').
			request send200Response: (responseAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 23:02:47' prior: 51002419!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' with: self createCart.

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | responseAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity').
			cartID := (request fields at: 'cartID').
			tusLibrosInnerInterface add: quantity asNumber of: isbn toCartIdentifiedAs: cartID asNumber.
			responseAsJson := WebUtils jsonEncode: ('OK').
			request send200Response: (responseAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 23:02:55'!
createCartHandler

	^ [:request | | username password cartID | 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartID 
		]! !
!TusLibrosServicesRestInterface methodsFor: 'as yet unclassified' stamp: 'ENC 7/7/2021 23:02:55' prior: 51002481!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' with: self createCartHandler.

	webServer addService: '/catalog' action:[ :request | | catalog catalogAsJson |
		[ 
			catalog := tusLibrosInnerInterface catalog.
			catalogAsJson := WebUtils jsonEncode: (catalog).
			request send200Response: (catalogAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].

	webServer addService: '/addBookToCart' action:[:request | | responseAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity').
			cartID := (request fields at: 'cartID').
			tusLibrosInnerInterface add: quantity asNumber of: isbn toCartIdentifiedAs: cartID asNumber.
			responseAsJson := WebUtils jsonEncode: ('OK').
			request send200Response: (responseAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !

!methodRemoval: TusLibrosServicesRestInterface #createCart stamp: 'ENC 7/7/2021 23:02:55'!
createCart

	^ [:request | | username password cartID | 
			username := (request fields at: 'username').
			password := (request fields at: 'password').
			cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
			cartID 
		]!
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 23:04:11'!
catalogHandler

	^ [ :request | | catalog |
		catalog := tusLibrosInnerInterface catalog.
		
		catalog
	] ! !
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 23:04:17' prior: 51002530!
createCartHandler

	^ [:request | | username password cartID | 
		username := (request fields at: 'username').
		password := (request fields at: 'password').
		cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
		
		cartID 
	]! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 23:04:44' prior: 51002542!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	webServer addService: '/createCart' with: self createCartHandler.

	webServer addService: '/catalog' with: self catalogHandler.

	webServer addService: '/addBookToCart' action:[:request | | responseAsJson isbn quantity cartID |
		[ 
			isbn := (request fields at: 'isbn').
			quantity := (request fields at: 'quantity').
			cartID := (request fields at: 'cartID').
			tusLibrosInnerInterface add: quantity asNumber of: isbn toCartIdentifiedAs: cartID asNumber.
			responseAsJson := WebUtils jsonEncode: ('OK').
			request send200Response: (responseAsJson)
		] 
		on: Error 
		do: [ :anError |
			request send400Response: (anError messageText) ] 
	].
! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 23:05:10' prior: 51002621!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade
		authenticatingWith: aUserAndPasswordList 
		creditCards: aCreditCards
		acceptingItemsOf: aCatalog 
		registeringOn: aSalesBook 
		debitingThrought: aMerchantProcessor 
		measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	webServer addService: '/createCart' with: self createCartHandler.
	webServer addService: '/catalog' with: self catalogHandler.
	webServer addService: '/addBookToCart' with: self addToCartHandler.
! !
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 23:07:04' prior: 51002375!
addToCartHandler

	^ [:request | | cartID username password | 
		username := (request fields at: 'username').	
		password := (request fields at: 'password').
		cartID := tusLibrosInnerInterface createCartFor: username authenticatedWith: password.
		
		cartID
	]! !
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 23:07:59' prior: 51002662!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog 
											   registeringOn: aSalesBook debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	webServer addService: '/createCart' with: self createCartHandler.
	webServer addService: '/catalog' with: self catalogHandler.
	webServer addService: '/addBookToCart' with: self addToCartHandler.
! !
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'ENC 7/7/2021 23:08:17' prior: 50979416!
add: anAmount of: aBook toCartIdentifiedAs: aCartId

	self halt.
	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession addToCart: anAmount of: aBook ]! !

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!
!TusLibrosServicesRestInterface methodsFor: 'initialization' stamp: 'ENC 7/7/2021 23:09:02' prior: 51002701!
initializeWith: aPortNumber authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog registeringOn: aSalesBook 
debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	tusLibrosInnerInterface := TusLibrosSystemFacade authenticatingWith: aUserAndPasswordList creditCards: aCreditCards acceptingItemsOf: aCatalog 
											   registeringOn: aSalesBook debitingThrought: aMerchantProcessor measuringTimeWith: aClock.
	
	port := aPortNumber.
	
	webServer := WebServer new listenOn: self port.
	
	self addService: '/createCart' with: self createCartHandler.
	self addService: '/catalog' with: self catalogHandler.
	self addService: '/addBookToCart' with: self addToCartHandler.
! !

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

TusLibrosServicesRestInterface allInstances.!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 22:59:54' prior: 51002689!
addToCartHandler

	^ [ :request | | cartID isbn quantity |
		quantity := (request fields at:'quantity').
		isbn := (request fields at:'book').
		cartID := (request fields at:'id').
		
		tusLibrosInnerInterface add: (quantity asNumber) of: isbn toCartIdentifiedAs: (cartID asNumber).
		
		Dictionary newFromPairs: {'status'.200.}
	]! !
!TusLibrosServicesRestInterface methodsFor: 'handlers' stamp: 'ENC 7/7/2021 23:11:16' prior: 51002932!
addToCartHandler

	^ [ :request | | cartID isbn quantity |
		quantity := (request fields at:'quantity').
		isbn := (request fields at:'isbn').
		cartID := (request fields at:'id').
		
		tusLibrosInnerInterface add: (quantity asNumber) of: isbn toCartIdentifiedAs: (cartID asNumber).
		
		'OK'.
	]! !
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 23:11:33' prior: 51002089!
add: aBooksUnits of: aBook to: aCartID

	| fieldDict urlEncodedBooksUnits urlEncodedBook urlEncodedCartID |
	
	urlEncodedBooksUnits := aBooksUnits.	
	urlEncodedBook := self correctlyEncodeSpacesForUrlRequestParameter: aBook.	
	urlEncodedCartID := aCartID .
	fieldDict := Dictionary newFromPairs: {'quantity'. urlEncodedBooksUnits. 'isbn'. urlEncodedBook. 'id'. urlEncodedCartID }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!

self at: 1!
!TusLibrosSystemFacade methodsFor: 'facade protocol' stamp: 'ENC 7/7/2021 23:16:12' prior: 51002728!
add: anAmount of: aBook toCartIdentifiedAs: aCartId

	self withCartSessionIdentifiedAs: aCartId do: [ :cartSession | cartSession addToCart: anAmount of: aBook ]! !

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!
!TusLibrosRestInterface methodsFor: 'preparing request' stamp: 'ENC 7/7/2021 23:27:18' prior: 51002959!
add: aBooksUnits of: aBook to: aCartID

	| fieldDict |
	
	fieldDict := Dictionary newFromPairs: {'quantity'. aBooksUnits. 'isbn'. aBook. 'id'. aCartID  }.
	
	^ self sendRequest: fieldDict to: '/addBookToCart'.! !

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

----QUIT----(7 July 2021 23:30:25) CuisUniversity-4532.image priorSource: 21275132!

----STARTUP---- (7 July 2021 23:30:36) as /Users/ecerdeira/Desktop/ST limpio/CuisUniversity-4532.image!


TusLibrosServicesRestInterface allInstances.!

server := TusLibrosServicesRestInterface iniciar: 8080.
!

client := TusLibrosClientLoginWindow open.
!

TusLibrosServicesRestInterface allInstances.!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServicesRestInterface allInstances.!

----STARTUP---- (8 July 2021 13:36:10) as /Users/ecerdeira/Desktop/ST limpio/CuisUniversity-4532.image!


!classRemoval: #TusLibrosRestInterface stamp: 'ENC 7/8/2021 13:36:36'!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientTicketWindowModel stamp: 'ENC 7/8/2021 13:36:37'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: 'ticket ticketIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientRecordWindowModel stamp: 'ENC 7/8/2021 13:36:37'!
Object subclass: #TusLibrosClientRecordWindowModel
	instanceVariableNames: 'recordIndex record recordDetail recordDetailIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientLoginWindowModel stamp: 'ENC 7/8/2021 13:36:37'!
Object subclass: #TusLibrosClientLoginWindowModel
	instanceVariableNames: 'username password cartID restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientCatalogWindowModel stamp: 'ENC 7/8/2021 13:36:37'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'catalog catalogIndex restInterface cart cartIndex booksUnits catalogInfo cartID username password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientTicketWindow stamp: 'ENC 7/8/2021 13:36:37'!
Panel subclass: #TusLibrosClientTicketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientRecordWindow stamp: 'ENC 7/8/2021 13:36:37'!
Panel subclass: #TusLibrosClientRecordWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientLoginWindow stamp: 'ENC 7/8/2021 13:36:37'!
Panel subclass: #TusLibrosClientLoginWindow
	instanceVariableNames: 'passwordTextBoxMorph usernameTextBoxMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientErrorWindow stamp: 'ENC 7/8/2021 13:36:37'!
Panel subclass: #TusLibrosClientErrorWindow
	instanceVariableNames: 'errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #TusLibrosClientCatalogWindow stamp: 'ENC 7/8/2021 13:36:37'!
Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClient'!

!classRemoval: #WordsRestInterface stamp: 'ENC 7/8/2021 13:36:39'!
Object subclass: #WordsRestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'WordsClientDemo'!

!classRemoval: #WordsClientWindowModel stamp: 'ENC 7/8/2021 13:36:39'!
Object subclass: #WordsClientWindowModel
	instanceVariableNames: 'sentence words selectedIndex restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'WordsClientDemo'!

!classRemoval: #WordsClientWindow stamp: 'ENC 7/8/2021 13:36:39'!
Panel subclass: #WordsClientWindow
	instanceVariableNames: 'sentenceTextBoxMorph wordsListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'WordsClientDemo'!

!classRemoval: #TusLibrosServicesRestInterface stamp: 'ENC 7/8/2021 13:36:42'!
Object subclass: #TusLibrosServicesRestInterface
	instanceVariableNames: 'webServer port tusLibrosInnerInterface tarjetas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosServicesServer'!

----End fileIn of /Users/ecerdeira/iteracion-4-TL/TusLibrosClientDemo.st----!
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 13:37:25' prior: 51006531!
buildAddQuantitySelector
	| addQuantityRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20 .
				
	addQuantityRow := LayoutMorph newRow.
	addQuantityRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^addQuantityRow.! !

Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: 'cartItemsMorph addQuantityTextBoxMorph checkoutRow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classDefinition: #TusLibrosClientCatalogWindow category: 'TusLibrosClientDemo' stamp: 'ENC 7/8/2021 13:39:22'!
Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: 'cartItemsMorph addQuantityTextBoxMorph checkoutRow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classDefinition: #TusLibrosClientCatalogWindow category: 'TusLibrosClientDemo' stamp: 'ENC 7/8/2021 13:39:28'!
Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: 'cartItemsMorph addQuantityTextBoxMorph checkoutRowLayoutMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/8/2021 13:39:28' prior: 51006468!
buildCheckoutRow
	| checkOutButtonMorph purchasesButtonMorph checkOutLayoutMorph purchasesLayoutMorph |
	
	purchasesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #listPurchasesRequest  label: 'Record'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
	
	purchasesLayoutMorph := LayoutMorph newRow.
	purchasesLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: purchasesButtonMorph.
		
	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutLayoutMorph;
 	addMorph: purchasesLayoutMorph.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 13:40:20' prior: 51007064!
cartItems
	| uniqueItems items |

	uniqueItems := OrderedCollection withAll: (Set withAll:cartItems).
	items := OrderedCollection new.
	
	uniqueItems do: [ :book | 
		items add: book, ' (',(cartItems occurrencesOf: book) printString, ')'.
	].
	
	^items
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 13:40:28' prior: 51007087!
catalogItems

	| catalogItems |

	catalogItems := OrderedCollection new.
	catalog keysDo: [ :isbn | | price title |
		price := (catalog at: isbn) at: 'price'.
		title := (catalog at: isbn) at: 'title'.
		
		catalogItems add: isbn, ' | ', title, ' | $', (price printString).
	].
	
	^catalogItems	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 13:40:31' prior: 51007081!
catalogItemIndex: anIndex

	catalogItemIndex := anIndex.
	^true.
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 13:40:34' prior: 51007076!
catalogItemIndex

	^catalogItemIndex
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 13:40:38' prior: 51007420!
cartItems

	| uniqueItems items |

	uniqueItems := OrderedCollection withAll: (Set withAll:cartItems).
	items := OrderedCollection new.
	
	uniqueItems do: [ :book | 
		items add: book, ' (',(cartItems occurrencesOf: book) printString, ')'.
	].
	
	^items
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 13:40:42' prior: 51007058!
cartItemIndex: anIndex

	cartItemIndex := anIndex.
	^true.
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 13:40:46' prior: 51007053!
cartItemIndex

	^cartItemIndex
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 13:40:57' prior: 51006991!
addToCart

	| book |

	[
		book := (catalog keys at: catalogItemIndex).
		
		restInterface sendAddToCartRequestWith: cartID book: book quantity: addQuantity.
		
		cartItems := (restInterface sendListCartRequestWith: cartID) asOrderedCollection. 
		self triggerEvent: #cartUpdate with: self.
			
	] on: Error - MessageNotUnderstood do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Cannot add book to cart' title: 'Add book' .
	].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 13:41:00' prior: 51007008!
checkOutCartRequest

	| ticket |
	
	[
		ticket := restInterface sendCheckOutCartRequestWith: cartID.
		self triggerEvent: #close with: self.
		TusLibrosClientTicketWindow openWith: username password: password ticket: ticket.
		
	] on: Error - MessageNotUnderstood do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'There was an error with the purchase' title: 'Checkout' .
	].
	
	
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 13:41:04' prior: 51006950!
addQuantity

	^addQuantity printString! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 13:41:08' prior: 51006955!
addQuantity: aQuantity

	[ 
		addQuantity := (aQuantity asNumber) 
	] on: Error - MessageNotUnderstood do: [ :anError |
		addQuantity := 0.
	]. 
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 13:41:12' prior: 51006963!
cartID

	^cartID! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 13:41:16' prior: 51006967!
removeQuantity

	^removeQuantity printString! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 13:41:20' prior: 51006972!
removeQuantity: aQuantity

	[
		removeQuantity := aQuantity asNumber 
	] on: Error - MessageNotUnderstood do: [ :anError |
		removeQuantity := 0.
	]. 
	
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 13:41:24' prior: 51006981!
username

	^username
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 13:41:27' prior: 51006986!
username: aUsername

	username := aUsername.
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'initialization' stamp: 'ENC 7/8/2021 13:41:31' prior: 51006935!
initializeWith: aUsername password: aPassword for: aCartID 

	username := aUsername.
	password := aPassword.
	cartID := aCartID.

	cartItems := OrderedCollection new.
	addQuantity := 0.
	removeQuantity := 0.
	cartItemIndex := 1.
	catalogItemIndex := 1.
	restInterface := TusLibrosRestInterface new.
	
	catalog := restInterface sendCatalogRequest.
	
	! !

!classRemoval: #StoreTestObjectsFactory stamp: 'ENC 7/8/2021 13:50:29'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #ManualClock stamp: 'ENC 7/8/2021 13:50:29'!
Clock subclass: #ManualClock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #TusLibrosSystemFacadeTest stamp: 'ENC 7/8/2021 13:50:29'!
TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectsFactory clock systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #CashierTest stamp: 'ENC 7/8/2021 13:50:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #CartTest stamp: 'ENC 7/8/2021 13:50:29'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Tests'!

!classRemoval: #TusLibrosSystemFacade stamp: 'ENC 7/8/2021 13:50:31'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions creditCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Ticket stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #Ticket
	instanceVariableNames: 'lineItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Sale stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #Sale
	instanceVariableNames: 'customer ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #MerchantProcessor stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #LineItem stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #LineItem
	instanceVariableNames: 'item quantity total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #CreditCard stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Clock stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Cashier stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard owner ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #CartSession stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #CartSession
	instanceVariableNames: 'owner cart lastUsedTime systemFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classRemoval: #Cart stamp: 'ENC 7/8/2021 13:50:32'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

----End fileIn of /Users/ecerdeira/iteracion-4-TL/TusLibrosServicesServer.st----!

!classRemoval: #TusLibrosRestInterface stamp: 'ENC 7/8/2021 14:11:19'!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: 'portNumber port webServer facade factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-REST-API'!

----End fileIn of /Users/ecerdeira/iteracion-4-TL/TusLibrosServicesServer.st----!
!TusLibrosRestInterface methodsFor: 'services' stamp: 'ENC 7/8/2021 14:12:44' prior: 51007992!
addService: aServiceName action: aBlock

	webServer addService: aServiceName action:[:request |
		[ | response |
			response := aBlock value: request.
			request send200Response: (WebUtils jsonEncode: response)
		] on: Error do: [ :anError |
			request send400Response: (anError messageText) 
		]
	]! !

----End fileIn of /Users/ecerdeira/iteracion-4-TL/TusLibros-Model.st----!

----End fileIn of /Users/ecerdeira/iteracion-4-TL/TusLibros-Tests.st----!

TusLibrosRestInterface allInstances.!

server := TusLibrosRestInterface listeningOn: 8080.
!

window := TusLibrosClientCreateCartWindow open.!
!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:27:15'!
buildLoginInputRow
	| loginInputRowLayoutMorph |
	
	loginInputRowLayoutMorph := LayoutMorph newColumn.
	loginInputRowLayoutMorph separation: 1;
	axisEdgeWeight: 0.5;
	addMorph: self buildLoginInputUsernameRow;
	addMorph: self buildLoginInputPasswordRow.
	
	^loginInputRowLayoutMorph.
	! !

!methodRemoval: TusLibrosClientCreateCartWindow #loginInputRow stamp: 'ENC 7/8/2021 14:27:15'!
loginInputRow
	| loginInputRowLayoutMorph |
	
	loginInputRowLayoutMorph := LayoutMorph newColumn.
	loginInputRowLayoutMorph separation: 1;
	axisEdgeWeight: 0.5;
	addMorph: self buildLoginInputUsernameRow;
	addMorph: self buildLoginInputPasswordRow.
	
	^loginInputRowLayoutMorph.
	!

window := TusLibrosClientCreateCartWindow open.
!

----QUIT----(8 July 2021 14:28:44) CuisUniversity-4532.image priorSource: 21485002!

----STARTUP---- (8 July 2021 14:28:53) as /Users/ecerdeira/Desktop/ST limpio/CuisUniversity-4532.image!


!classRemoval: #TusLibrosClientTicketWindowModel stamp: 'ENC 7/8/2021 14:33:31'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: 'username password ticket ticketLineIndex restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosClientPurchasesWindowModel stamp: 'ENC 7/8/2021 14:33:32'!
Object subclass: #TusLibrosClientPurchasesWindowModel
	instanceVariableNames: 'purchases username password purchaseIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosClientCreateCartWindowModel stamp: 'ENC 7/8/2021 14:33:32'!
Object subclass: #TusLibrosClientCreateCartWindowModel
	instanceVariableNames: 'username password restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosClientCatalogWindowModel stamp: 'ENC 7/8/2021 14:33:32'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'cartItems catalog addQuantity removeQuantity username password cartID cartItemIndex catalogItemIndex restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosClientTicketWindow stamp: 'ENC 7/8/2021 14:33:32'!
Panel subclass: #TusLibrosClientTicketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosClientPurchasesWindow stamp: 'ENC 7/8/2021 14:33:32'!
Panel subclass: #TusLibrosClientPurchasesWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosClientErrorWindow stamp: 'ENC 7/8/2021 14:33:32'!
Panel subclass: #TusLibrosClientErrorWindow
	instanceVariableNames: 'errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosClientCreateCartWindow stamp: 'ENC 7/8/2021 14:33:32'!
Panel subclass: #TusLibrosClientCreateCartWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosClientCatalogWindow stamp: 'ENC 7/8/2021 14:33:32'!
Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: 'cartItemsMorph addQuantityTextBoxMorph checkoutRowLayoutMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classRemoval: #TusLibrosRestInterface stamp: 'ENC 7/8/2021 14:33:34'!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: 'portNumber port webServer facade factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosServicesServer'!

----End fileIn of /Users/ecerdeira/iteracion-4-TL/TusLibrosClientDemo.st----!

----End fileIn of /Users/ecerdeira/iteracion-4-TL/TusLibrosServicesServer.st----!
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 14:37:22'!
send: aFieldDict to: anEndpoint 

	| response |
	
	response := WebClient htmlSubmit: (self url, anEndpoint) fields: aFieldDict.
	
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)). ] 
		ifFalse: [ ^self error: response content ].! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 14:37:45' prior: 51013954!
sendAddToCartRequestWith: aCartID book: aBook quantity: aQuantity
	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'quantity'. aQuantity. 'id'. aCartID. 'isbn'. aBook.}.		
	
	resp:= WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)).] 
		ifFalse:[^self error: resp content].! !

Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: 'cartItemsMorph addQuantityTextBoxMorph checkoutRow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classDefinition: #TusLibrosClientCatalogWindow category: 'TusLibrosClientDemo' stamp: 'ENC 7/8/2021 14:38:30'!
Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: 'cartItemsMorph addQuantityTextBoxMorph checkoutRow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!classDefinition: #TusLibrosClientCatalogWindow category: 'TusLibrosClientDemo' stamp: 'ENC 7/8/2021 14:38:57'!
Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: 'cartItemsMorph addQuantityTextBoxMorph checkoutRowLayoutMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/8/2021 14:38:57' prior: 51013195!
buildCheckoutRow
	| checkOutButtonMorph purchasesButtonMorph checkOutLayoutMorph purchasesLayoutMorph |
	
	purchasesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #listPurchasesRequest  label: 'Record'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
	
	purchasesLayoutMorph := LayoutMorph newRow.
	purchasesLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: purchasesButtonMorph.
		
	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutLayoutMorph;
 	addMorph: purchasesLayoutMorph.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	! !
!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:39:30'!
buildLoginInputRow
	| loginInputRowLayoutMorph |
	
	loginInputRowLayoutMorph := LayoutMorph newColumn.
	loginInputRowLayoutMorph separation: 1;
	axisEdgeWeight: 0.5;
	addMorph: self buildLoginInputUsernameRow;
	addMorph: self buildLoginInputPasswordRow.
	
	^loginInputRowLayoutMorph.
	! !

!methodRemoval: TusLibrosClientCreateCartWindow #loginInputRow stamp: 'ENC 7/8/2021 14:39:30'!
loginInputRow
	| loginInputRowLayoutMorph |
	
	loginInputRowLayoutMorph := LayoutMorph newColumn.
	loginInputRowLayoutMorph separation: 1;
	axisEdgeWeight: 0.5;
	addMorph: self buildLoginInputUsernameRow;
	addMorph: self buildLoginInputPasswordRow.
	
	^loginInputRowLayoutMorph.
	!

TusLibrosRestInterface allInstancesDo: [ :instance | instance destroy ].!

TusLibrosRestInterface allInstances.!

server := TusLibrosRestInterface listeningOn: 8080.
!

server := TusLibrosServerServices listeningOn: 8080.
!

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:42:30' prior: 51013791!
cartItems
	| uniqueItems items |

	uniqueItems := OrderedCollection withAll: (Set withAll:cartItems).
	items := OrderedCollection new.
	
	uniqueItems do: [ :book | 
		items add: book, ' (',(cartItems occurrencesOf: book) printString, ')'.
	].
	
	^items
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:43:18' prior: 51013814!
catalogItems
	| catalogItems |

	catalogItems := OrderedCollection new.
	catalog keysDo: [ :isbn | | price title |
		price := (catalog at: isbn) at: 'price'.
		title := (catalog at: isbn) at: 'title'.
		
		catalogItems add: isbn, ' - ', title, '  ($', (price printString),  ')'.
	].
	
	^catalogItems	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:43:28' prior: 51014362!
catalogItems

	| catalogItems |

	catalogItems := OrderedCollection new.
	catalog keysDo: [ :isbn | | price title |
		price := (catalog at: isbn) at: 'price'.
		title := (catalog at: isbn) at: 'title'.
		
		catalogItems add: isbn, ' - ', title, '  ($', (price printString),  ')'.
	].
	
	^catalogItems	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:43:32' prior: 51013803!
catalogItemIndex

	^catalogItemIndex
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:43:39' prior: 51013808!
catalogItemIndex: anIndex

	catalogItemIndex := anIndex.
	^ true.
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:43:44' prior: 51014390!
catalogItemIndex

	^ catalogItemIndex
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:44:15' prior: 51014350!
cartItems
	| uniqueItems items |

	items := OrderedCollection new.
	uniqueItems := OrderedCollection withAll: (Set withAll: cartItems).
	
	uniqueItems do: [ :book | 
		items add: book, ' (', (cartItems occurrencesOf: book) printString, ')'.
	].
	
	^ items
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:44:32' prior: 51014408!
cartItems
	| setOfItems items |

	items := OrderedCollection new.
	setOfItems := OrderedCollection withAll: (Set withAll: cartItems).
	
	setOfItems do: [ :book | 
		items add: book, ' (', (cartItems occurrencesOf: book) printString, ')'.
	].
	
	^ items
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:45:11' prior: 51014420!
cartItems

	| setOfItems items |

	items := OrderedCollection new.
	
	setOfItems := OrderedCollection withAll: (Set withAll: cartItems).
	setOfItems do: [ :isbn | 
		items add: isbn, ' (', (cartItems occurrencesOf: isbn) printString, ')'.
	].
	
	^ items
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:45:17' prior: 51013785!
cartItemIndex: anIndex

	cartItemIndex := anIndex.
	^ true.
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:45:23' prior: 51013780!
cartItemIndex

	^ cartItemIndex
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:45:41' prior: 51013718!
addToCart

	| isbn |

	[
		isbn := (catalog keys at: catalogItemIndex).
		
		restInterface sendAddToCartRequestWith: cartID book: isbn quantity: addQuantity.
		
		cartItems := (restInterface sendListCartRequestWith: cartID) asOrderedCollection. 
		self triggerEvent: #cartUpdate with: self.
			
	] on: Error - MessageNotUnderstood do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Cannot add book to cart' title: 'Add book' .
	].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:45:48' prior: 51014455!
addToCart

	| isbn |

	[
		isbn := (catalog keys at: catalogItemIndex).
		
		restInterface sendAddToCartRequestWith: cartID book: isbn quantity: addQuantity.
		
		cartItems := (restInterface sendListCartRequestWith: cartID) asOrderedCollection. 
		self triggerEvent: #cartUpdate with: self.
			
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Cannot add book to cart' title: 'Add book' .
	].! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:46:10' prior: 51013735!
checkOutCartRequest

	| ticket |
	
	[
		ticket := restInterface sendCheckOutCartRequestWith: cartID.
		self triggerEvent: #close with: self.
		TusLibrosClientTicketWindow openWith: username password: password ticket: ticket.
		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'There was an error with the purchase' title: 'Checkout' .
	].
	
	
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:46:15' prior: 51014490!
checkOutCartRequest

	| ticket |
	
	[
		ticket := restInterface sendCheckOutCartRequestWith: cartID.
		self triggerEvent: #close with: self.
		
		TusLibrosClientTicketWindow openWith: username password: password ticket: ticket.
		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'There was an error with the purchase' title: 'Checkout' .
	].
	
	
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:46:44' prior: 51013761!
removeFromCart
	
	| book |
	
	[
		book := ( (OrderedCollection withAll:(Set withAll:cartItems)) at: cartItemIndex).
		
		restInterface sendRemoveFromCartRequestWith: cartID book: book quantity: removeQuantity.
		
		cartItems := (restInterface sendListCartRequestWith: cartID) asOrderedCollection. 
		self triggerEvent: #cartUpdate with: self.
		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Cannot remove the book' title: 'Remove book' .
	].
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:46:48' prior: 51014522!
removeFromCart
	
	| isbn |
	
	[
		isbn := ( (OrderedCollection withAll:(Set withAll:cartItems)) at: cartItemIndex).
		
		restInterface sendRemoveFromCartRequestWith: cartID book: isbn quantity: removeQuantity.
		
		cartItems := (restInterface sendListCartRequestWith: cartID) asOrderedCollection. 
		self triggerEvent: #cartUpdate with: self.
		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Cannot remove the book' title: 'Remove book' .
	].
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:47:21' prior: 51014541!
removeFromCart
	
	| isbn |
	
	[
		isbn := ((OrderedCollection withAll: (Set withAll:cartItems)) at: cartItemIndex).
		
		restInterface sendRemoveFromCartRequestWith: cartID book: isbn quantity: removeQuantity.
		
		cartItems := (restInterface sendListCartRequestWith: cartID) asOrderedCollection. 
		self triggerEvent: #cartUpdate with: self.
		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Cannot remove the book' title: 'Remove book' .
	].
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:47:34' prior: 51013677!
addQuantity

	^ addQuantity printString! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:47:42' prior: 51013682!
addQuantity: aQuantity

	[ 
		addQuantity := (aQuantity asNumber) 
	] on: Error do: [ :anError |
		addQuantity := 0.
	]. 
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:47:52' prior: 51013690!
cartID

	^ cartID! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:47:58' prior: 51013694!
removeQuantity

	^ removeQuantity printString! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:48:02' prior: 51013699!
removeQuantity: aQuantity

	[
		removeQuantity := aQuantity asNumber 
	] on: Error - MessageNotUnderstood do: [ :anError |
		removeQuantity := 0.
	]. 
	
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:48:05' prior: 51014604!
removeQuantity: aQuantity

	[
		removeQuantity := aQuantity asNumber 
	] on: Error do: [ :anError |
		removeQuantity := 0.
	]. 
	
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:48:11' prior: 51013708!
username

	^ username
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:48:14' prior: 51013713!
username: aUsername

	username := aUsername.
	 ! !
!TusLibrosClientCatalogWindowModel methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:48:25' prior: 51013662!
initializeWith: aUsername password: aPassword for: aCartID 

	username := aUsername.
	password := aPassword.
	cartID := aCartID.

	cartItems := OrderedCollection new.
	addQuantity := 0.
	removeQuantity := 0.
	cartItemIndex := 1.
	catalogItemIndex := 1.
	
	restInterface := TusLibrosRestInterface new.
	
	catalog := restInterface sendCatalogRequest.
	
	! !
!TusLibrosClientCatalogWindowModel methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:48:57' prior: 51014632!
initializeWith: aUsername password: aPassword for: aCartID 

	username := aUsername.
	password := aPassword.
	cartID := aCartID.

	cartItems := OrderedCollection new.
	addQuantity := 0.
	removeQuantity := 0.
	cartItemIndex := 1.
	catalogItemIndex := 1.
	
	restInterface := TusLibrosRestInterface new.
	
	"Ask just once for the complete catalog to the interface"
	catalog := restInterface sendCatalogRequest.
	
	! !
!TusLibrosClientCatalogWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:49:44' prior: 51013332!
initializeOpenWith: aUsername password: aPassword for: aCartID 

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'TusLibros - Catalog'.
	self model: (TusLibrosClientCatalogWindowModel with: aUsername password: aPassword for: aCartID ).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
				
	self model when: #cartUpdate send: #refreshCart to: self.
	self model when: #close send: #closeButtonClicked to: self.! !
!TusLibrosClientCatalogWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:50:26' prior: 51013351!
refreshCart

	cartItemsMorph updateList.
	cartItemsMorph setSelectionIndex: 1.
	
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:50:34' prior: 51013258!
buildAddQuantitySelector

	| addQuantityRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Agregar'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20 .
				
	addQuantityRow := LayoutMorph newRow.
	addQuantityRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^addQuantityRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:50:38' prior: 51014689!
buildAddQuantitySelector

	| addQuantityRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20 .
				
	addQuantityRow := LayoutMorph newRow.
	addQuantityRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^addQuantityRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:50:48' prior: 51014718!
buildAddQuantitySelector

	| addQuantityRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20.
				
	addQuantityRow := LayoutMorph newRow.
	addQuantityRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^addQuantityRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:50:55' prior: 51014747!
buildAddQuantitySelector

	| addQuantityRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20.
				
	addQuantityRow := LayoutMorph newRow.
	addQuantityRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^ addQuantityRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:51:00' prior: 51013239!
buildCartItemsRow

	| cartItemsRow |
	
	cartItemsMorph := PluggableListMorph model: self model listGetter: #cartItems indexGetter: #cartItemIndex indexSetter: #cartItemIndex:.
	cartItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:600; morphHeight:500.
		
	cartItemsRow := LayoutMorph newColumn.
	cartItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: self buildRemoveQuantitySelector;
	addMorph: cartItemsMorph.
		
	^cartItemsRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:51:06' prior: 51014805!
buildCartItemsRow

	| cartItemsRow |
	
	cartItemsMorph := PluggableListMorph model: self model listGetter: #cartItems indexGetter: #cartItemIndex indexSetter: #cartItemIndex:.
	cartItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:600; morphHeight:500.
		
	cartItemsRow := LayoutMorph newColumn.
	cartItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: self buildRemoveQuantitySelector;
	addMorph: cartItemsMorph.
		
	^ cartItemsRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:51:10' prior: 51013226!
buildCatalogAndCartRow

	| catalogAndCartRow |
	
	catalogAndCartRow := LayoutMorph newRow.
	catalogAndCartRow separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogItemsRow;
	addMorph: self buildCartItemsRow.
	
	catalogAndCartRow layoutSpec proportionalHeight: 100.
	
	^catalogAndCartRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:51:14' prior: 51014843!
buildCatalogAndCartRow

	| catalogAndCartRow |
	
	catalogAndCartRow := LayoutMorph newRow.
	catalogAndCartRow separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogItemsRow;
	addMorph: self buildCartItemsRow.
	
	catalogAndCartRow layoutSpec proportionalHeight: 100.
	
	^ catalogAndCartRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:51:19' prior: 51013175!
buildCatalogItemsRow

	| catalogItemsRow catalogItemsMorph |
	
	catalogItemsMorph := PluggableListMorph model: self model listGetter: #catalogItems indexGetter: #catalogItemIndex indexSetter: #catalogItemIndex:.
	catalogItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:600; morphHeight:500.
		
	catalogItemsRow := LayoutMorph newColumn.
	catalogItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: self buildAddQuantitySelector;
	addMorph: catalogItemsMorph.
		
	^catalogItemsRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:51:26' prior: 51014284!
buildCheckoutRow

	| checkOutButtonMorph purchasesButtonMorph checkOutLayoutMorph purchasesLayoutMorph |
	
	purchasesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #listPurchasesRequest  label: 'Record'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
	
	purchasesLayoutMorph := LayoutMorph newRow.
	purchasesLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: purchasesButtonMorph.
		
	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutLayoutMorph;
 	addMorph: purchasesLayoutMorph.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:52:02'!
buildCheckoutAndRecordRow

	| checkOutButtonMorph purchasesButtonMorph checkOutLayoutMorph purchasesLayoutMorph |
	
	purchasesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #listPurchasesRequest  label: 'Record'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
	
	purchasesLayoutMorph := LayoutMorph newRow.
	purchasesLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: purchasesButtonMorph.
		
	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutLayoutMorph;
 	addMorph: purchasesLayoutMorph.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'as yet unclassified' stamp: 'ENC 7/8/2021 14:52:02' prior: 51013287 overrides: 50973325!
buildMorphicWindow
	self layoutMorph beColumn;
	separation: 3;
	axisEdgeWeight: 0;
	addMorph: self buildCheckoutAndRecordRow;
	addMorph: self buildCatalogAndCartRow.
	! !

!methodRemoval: TusLibrosClientCatalogWindow #buildCheckoutRow stamp: 'ENC 7/8/2021 14:52:02'!
buildCheckoutRow

	| checkOutButtonMorph purchasesButtonMorph checkOutLayoutMorph purchasesLayoutMorph |
	
	purchasesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #listPurchasesRequest  label: 'Record'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
	
	purchasesLayoutMorph := LayoutMorph newRow.
	purchasesLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: purchasesButtonMorph.
		
	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutLayoutMorph;
 	addMorph: purchasesLayoutMorph.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	!
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:53:19'!
buildRecordRow

	| purchasesButtonMorph purchasesLayoutMorph |
	
	purchasesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #listPurchasesRequest  label: 'Record'.
	
	purchasesLayoutMorph := LayoutMorph newRow.
	purchasesLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: purchasesButtonMorph.
			
	^ purchasesLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:53:44' prior: 51014922!
buildCheckoutAndRecordRow

	| checkOutButtonMorph purchasesButtonMorph checkOutLayoutMorph purchasesLayoutMorph |
	
	purchasesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #listPurchasesRequest  label: 'Record'.
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
	
	purchasesLayoutMorph := LayoutMorph newRow.
	purchasesLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: purchasesButtonMorph.
		
	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutLayoutMorph;
 	addMorph: self buildRecordRow.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:53:52' prior: 51015011!
buildCheckoutAndRecordRow

	| checkOutButtonMorph checkOutLayoutMorph |
	
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
		
	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutLayoutMorph;
 	addMorph: self buildRecordRow.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:54:25'!
buildCheckoutRow

	| checkOutButtonMorph checkOutLayoutMorph |
	
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
			
	^ checkOutLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:54:46' prior: 51015044!
buildCheckoutAndRecordRow

	
		
	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: self buildCheckoutRow;
 	addMorph: self buildRecordRow.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:54:51' prior: 51015081!
buildCheckoutAndRecordRow

	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: self buildCheckoutRow;
 	addMorph: self buildRecordRow.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^checkoutRowLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:55:14' prior: 51014956 overrides: 50973325!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 3;
	axisEdgeWeight: 0;
	addMorph: self buildCheckoutAndRecordRow;
	addMorph: self buildCatalogAndCartRow.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:55:31' prior: 51015094!
buildCheckoutAndRecordRow

	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: self buildCheckoutRow;
 	addMorph: self buildRecordRow.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^ checkoutRowLayoutMorph.
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:55:36' prior: 51014869!
buildCatalogItemsRow

	| catalogItemsRow catalogItemsMorph |
	
	catalogItemsMorph := PluggableListMorph model: self model listGetter: #catalogItems indexGetter: #catalogItemIndex indexSetter: #catalogItemIndex:.
	catalogItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:600; morphHeight:500.
		
	catalogItemsRow := LayoutMorph newColumn.
	catalogItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: self buildAddQuantitySelector;
	addMorph: catalogItemsMorph.
		
	^ catalogItemsRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:56:11' prior: 51013295!
buildRemoveQuantitySelector

	| removeQuantitySelectorRow removeItemPluggableButtonMorph removeQuantityTextBoxMorph |
	
	removeItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #removeFromCart  label: 'Remove'.
	
	removeQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #removeQuantity textSetter: #removeQuantity:. 
	removeQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | removeQuantityTextBoxMorph textMorph acceptContents ].
	removeQuantityTextBoxMorph borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20.
				
	removeQuantitySelectorRow := LayoutMorph newRow.
	removeQuantitySelectorRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Remove from cart');
	addMorph: removeQuantityTextBoxMorph;
	addMorph: removeItemPluggableButtonMorph.
		
	^removeQuantitySelectorRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:56:29' prior: 51014776!
buildAddQuantitySelector

	| addQuantitySelectorRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20.
				
	addQuantitySelectorRow := LayoutMorph newRow.
	addQuantitySelectorRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^ addQuantitySelectorRow.! !
!TusLibrosClientCreateCartWindowModel methodsFor: 'TextModelMorphSelectors' stamp: 'ENC 7/8/2021 14:57:08' prior: 51013530!
password

	^ password! !
!TusLibrosClientCreateCartWindowModel methodsFor: 'TextModelMorphSelectors' stamp: 'ENC 7/8/2021 14:57:13' prior: 51013535!
password: aPassword
	
	password := aPassword.
	^ true.! !
!TusLibrosClientCreateCartWindowModel methodsFor: 'TextModelMorphSelectors' stamp: 'ENC 7/8/2021 14:57:17' prior: 51013541!
username
	
	^ username! !
!TusLibrosClientCreateCartWindowModel methodsFor: 'TextModelMorphSelectors' stamp: 'ENC 7/8/2021 14:57:23' prior: 51013546!
username: aUsername
	
	username := aUsername.
	^ true.! !
!TusLibrosClientCreateCartWindowModel methodsFor: 'PluggableButtonSelectors' stamp: 'ENC 7/8/2021 14:57:40' prior: 51013515!
sendCreateCartRequest
	
	| cartID |
	
	[
		cartID := restInterface sendLoginRequestWith: username password: password.
		TusLibrosClientCatalogWindow openWith: username password: password for: cartID.		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Not valid credentials' title: 'login' .
	].
	! !
!TusLibrosClientErrorWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:58:14' prior: 51011504!
buildErrorRow

	| errorLogoMorph errorRowLayoutMorph |

	errorLogoMorph := ImageMorph new.
	errorLogoMorph image: (Form fromBinaryStream: self logo base64Decoded asByteArray readStream).	
		
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: errorLogoMorph.
	
	errorRowLayoutMorph layoutSpec fixedWidth: 300.
	
	^ errorRowLayoutMorph.! !
!TusLibrosClientErrorWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:58:20' prior: 51011520 overrides: 50973325!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildErrorRow;
	addMorph: (LabelMorph contents: 'Error: ', errorMessage).
	! !
!TusLibrosClientErrorWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:58:35' prior: 51011534!
initializeWith: anErrorMessage errorTitle: aTitle
	
	errorMessage := anErrorMessage.
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Exception on ', aTitle.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			! !

	self setLabel: 'Purchases record'.!
!TusLibrosClientPurchasesWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:58:59' prior: 51013088!
initializeWith: aUsername password: aPassword purchases: aListOfPurchases

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Purchases record'.
	self model: (TusLibrosClientPurchasesWindowModel with: aUsername password: aPassword purchases: aListOfPurchases ).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	self model when: #close send: #closeButtonClicked to: self.! !
!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:09' prior: 51013129 overrides: 50973325!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUsernameRow;
	addMorph: self buildTotalesRow;
	addMorph: (LabelMorph contents:'Purchases detail');
	addMorph: self buildPurchasesRow.
	! !
!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:22' prior: 51013117!
buildPurchasesRow

	| purchasesMorph |

	purchasesMorph := PluggableListMorph model: self model listGetter: #purchases indexGetter: #purchaseIndex indexSetter: #purchaseIndex:.
	purchasesMorph borderWidth: 1;morphWidth:350; morphHeight:400.
	
	^ purchasesMorph! !
!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:28' prior: 51013111!
buildTotalesRow

	^ LabelMorph contents: 'Total: $',self model total.! !
!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:32' prior: 51015331!
buildTotalesRow

	^ LabelMorph contents: 'Total: $', self model total.! !
!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:37' prior: 51013105!
buildUsernameRow

	^ LabelMorph contents: 'Client: ',self model username.! !
!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:39' prior: 51015343!
buildUsernameRow

	^ LabelMorph contents: 'Client: ', self model username.! !
!TusLibrosClientPurchasesWindowModel methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:59:46' prior: 51013600!
initializeWith: aUsername password: aPassword purchases: aListOfPurchases

	username := aUsername.
	password:= aPassword.
	purchases := aListOfPurchases .
	purchaseIndex := 1.! !
!TusLibrosClientPurchasesWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:59:53' prior: 51013575!
purchaseIndex

	^ purchaseIndex ! !
!TusLibrosClientPurchasesWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:59:57' prior: 51013580!
purchaseIndex: anIndex
	
	purchaseIndex := anIndex.
	^ true.! !
!TusLibrosClientPurchasesWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:00:04' prior: 51013586!
purchases
	
	| purchasesItems |
	
	purchasesItems := OrderedCollection new.
	purchases keysDo: [:isbn | 
		| quantity total |
		quantity := (purchases at: isbn) at:'quantity'.
		total := (purchases at: isbn) at:'total'.
		purchasesItems add: isbn, '(', (quantity printString), ')', ' total: $', (total printString).].
	
	^purchasesItems	 ! !
!TusLibrosClientPurchasesWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:00:12' prior: 51015376!
purchases
	
	| purchasesItems |
	
	purchasesItems := OrderedCollection new.
	purchases keysDo: [ :isbn | | quantity total |
		quantity := (purchases at: isbn) at:'quantity'.
		total := (purchases at: isbn) at:'total'.
		purchasesItems add: isbn, '(', (quantity printString), ')', ' total: $', (total printString).].
	
	^purchasesItems	 ! !
!TusLibrosClientPurchasesWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:00:26' prior: 51015391!
purchases
	
	| purchasesItems |
	
	purchasesItems := OrderedCollection new.
	purchases keysDo: [ :isbn | | quantity total |
		quantity := (purchases at: isbn) at:'quantity'.
		total := (purchases at: isbn) at:'total'.
	
		purchasesItems add: isbn, '(', (quantity printString), ')', ' total: $', (total printString).
	].
	
	^ purchasesItems	 ! !
!TusLibrosClientPurchasesWindowModel methodsFor: 'LabelModelMorphSelector' stamp: 'ENC 7/8/2021 15:00:37' prior: 51013609!
total

	| total |
	
	total := 0.
	purchases keysDo:[ :isbn | 
		total := total + ((purchases at: isbn) at: 'total') asNumber
	]. 
	
	^ total printString.! !
!TusLibrosClientPurchasesWindowModel methodsFor: 'LabelModelMorphSelector' stamp: 'ENC 7/8/2021 15:00:42' prior: 51013618!
username
	
	^ username! !
!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:00:48' prior: 51013452 overrides: 50973325!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildTicketRow;
	addMorph: self buildNextRow.
	! !
!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:00:51' prior: 51013432!
buildNextButtonsRow

	| noButtonMorph nextButtonsRow yesButtonMorph |
	
	yesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createNewCart  label: 'Create new cart'.
	noButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Logout'.
		
	nextButtonsRow := LayoutMorph newRow.
	nextButtonsRow morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: yesButtonMorph;
 	addMorph: noButtonMorph.
	nextButtonsRow layoutSpec proportionalWidth: 10.
	
	^nextButtonsRow.
	! !
!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:00:57' prior: 51013413!
buildNextQuestionRow

	^ LabelMorph contents:'What do you wanna do?'.
	! !
!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:01:00' prior: 51013419!
buildNextRow

	| secondRowLayoutMorph |
	
	secondRowLayoutMorph := LayoutMorph newColumn.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildNextQuestionRow;
	addMorph: self buildNextButtonsRow.
	
	secondRowLayoutMorph layoutSpec proportionalHeight: 100.
	
	^secondRowLayoutMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:01:03' prior: 51015469!
buildNextRow

	| secondRowLayoutMorph |
	
	secondRowLayoutMorph := LayoutMorph newColumn.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildNextQuestionRow;
	addMorph: self buildNextButtonsRow.
	
	secondRowLayoutMorph layoutSpec proportionalHeight: 100.
	
	^ secondRowLayoutMorph.! !
!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:01:06' prior: 51013392!
buildTicketRow

	| ticketRowLayoutMorph ticketLineMorph |
	
	ticketLineMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketLineIndex indexSetter: #ticketLineIndex:.
	ticketLineMorph borderWidth: 1;morphWidth:500; morphHeight:600.
		
	ticketRowLayoutMorph := LayoutMorph newColumn.
	ticketRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: ticketLineMorph;
	addMorph: (LabelMorph contents:'Total: $',self model total).

	ticketRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^ticketRowLayoutMorph.
	! !
!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:01:10' prior: 51015497!
buildTicketRow

	| ticketRowLayoutMorph ticketLineMorph |
	
	ticketLineMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketLineIndex indexSetter: #ticketLineIndex:.
	ticketLineMorph borderWidth: 1;morphWidth:500; morphHeight:600.
		
	ticketRowLayoutMorph := LayoutMorph newColumn.
	ticketRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: ticketLineMorph;
	addMorph: (LabelMorph contents:'Total: $', self model total).

	ticketRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^ticketRowLayoutMorph.
	! !
!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:01:12' prior: 51015518!
buildTicketRow

	| ticketRowLayoutMorph ticketLineMorph |
	
	ticketLineMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketLineIndex indexSetter: #ticketLineIndex:.
	ticketLineMorph borderWidth: 1;morphWidth:500; morphHeight:600.
		
	ticketRowLayoutMorph := LayoutMorph newColumn.
	ticketRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: ticketLineMorph;
	addMorph: (LabelMorph contents:'Total: $', self model total).

	ticketRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^ ticketRowLayoutMorph.
	! !
!TusLibrosClientTicketWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:01:21' prior: 51013465!
initializeOpenWith: aUsername password: aPassword ticket: aCartID 

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Purchase detail'.
	self model: (TusLibrosClientTicketWindowModel with: aUsername password: aPassword with: aCartID ).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #close send: #closeButtonClicked to: self.
	! !
!TusLibrosClientTicketWindowModel methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:01:27' prior: 51013861!
initializeWith: aUsername password: aPassword ticket: aTicket

	username := aUsername.
	password := aPassword.
	ticket := aTicket.

	ticketLineIndex := 1.
	restInterface := TusLibrosRestInterface new.! !
!TusLibrosClientTicketWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:01:33' prior: 51013871!
ticket

	| ticketItems |

	ticketItems := OrderedCollection new.
	ticket keysDo: [:isbn | | quantity total |
		quantity := (ticket at: isbn) at: 'quantity'.
		total := (ticket at: isbn) at: 'total'.

		ticketItems add: isbn, ' (', (quantity printString), ') ', ' total: $', (total printString).
	].
	
	^ticketItems	 ! !
!TusLibrosClientTicketWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:01:39' prior: 51013890!
ticketLineIndex: anIndex

	ticketLineIndex := anIndex.
	^ true.
	! !
!TusLibrosClientTicketWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:01:44' prior: 51013885!
ticketLineIndex
	
	^ ticketLineIndex.
	! !
!TusLibrosClientTicketWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 15:01:48' prior: 51013896!
createNewCart

	| cartID |
	
	self triggerEvent: #close with: self.
	cartID := restInterface sendLoginRequestWith: username password: password.
	
	TusLibrosClientCatalogWindow openWith: username password: password for: cartID.! !
!TusLibrosClientTicketWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 15:01:51' prior: 51013907!
logOut

	self triggerEvent: #close with: self.! !
!TusLibrosClientTicketWindowModel methodsFor: 'LabelModelMorphSelector' stamp: 'ENC 7/8/2021 15:01:57' prior: 51013912!
total

	| total |
	
	total := 0.
	ticket keysDo:[:isbn | 
		total := total + ((ticket at: isbn) at: 'total') asNumber
	]. 
	
	^total printString.! !
!TusLibrosClientTicketWindowModel methodsFor: 'LabelModelMorphSelector' stamp: 'ENC 7/8/2021 15:01:59' prior: 51015631!
total

	| total |
	
	total := 0.
	ticket keysDo:[:isbn | 
		total := total + ((ticket at: isbn) at: 'total') asNumber
	]. 
	
	^ total printString.! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:02:08' prior: 51013950!
port
	
	^ port ifNil: [ port := 8080 ].! !
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:02:12' prior: 51014050!
url
	
	^ 'http://localhost:', self port asString! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:02:45' prior: 51014242!
sendAddToCartRequestWith: aCartID book: aBook quantity: aQuantity
	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'quantity'. aQuantity. 'id'. aCartID. 'isbn'. aBook.}.		
	
	^ self send: fieldDict to: '/addToCart'.! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:02:50' prior: 51015658!
sendAddToCartRequestWith: aCartID book: aBook quantity: aQuantity
	
	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'quantity'. aQuantity. 'id'. aCartID. 'isbn'. aBook.}.		
	
	^ self send: fieldDict to: '/addToCart'.! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:03:25' prior: 51013969!
sendCatalogRequest
	
	^ self send: Dictionary new to: '/catalog'.! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:03:49' prior: 51013979!
sendCheckOutCartRequestWith: aCartID 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {	'id'. aCartID.}.		
		
	^ self send: fieldDict to: '/checkOut'.! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:04:22' prior: 51013992!
sendListCartRequestWith: aCartID 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {	'id'. aCartID.}.		
	
	^ self send: fieldDict to: '/listCart'! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:04:39' prior: 51014005!
sendListPurchasesFor: aUsername password: aPassword
	
	| fieldDict |

	fieldDict := Dictionary newFromPairs: {	'username'. aUsername. 'password'. aPassword }.		
	
	^ self send: fieldDict to: '/listPurchases'! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:04:52' prior: 51014020!
sendLoginRequestWith: aUsername password: aPassword

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'username'. aUsername. 'password'. aPassword.}.		
	
	^ self send: fieldDict to: '/login'! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:05:10' prior: 51014034!
sendRemoveFromCartRequestWith: aCartID book: aBook quantity: aQuantity
	
	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'quantity'. aQuantity. 'id'. aCartID. 'isbn'. aBook.}.		
	
	^ self send: fieldDict to: '/removeFromCart'! !
!TusLibrosServerServices methodsFor: 'services' stamp: 'ENC 7/8/2021 15:05:37' prior: 51014194!
addService: aServiceName action: aBlock

	webServer addService: aServiceName action:[:request |
		[ | response |
			response := aBlock value: request.
			request send200Response: (WebUtils jsonEncode: response)
		] on: Error do: [ :anError |
			request send400Response: (anError messageText) 
		]
	]! !
!TusLibrosServerServices methodsFor: 'service handler' stamp: 'ENC 7/8/2021 15:06:58' prior: 51014121!
catalogHandler

	^ [ :request | | titles prices catalog |
		prices := facade catalog.
		titles := factory defaultTitlesCatalog.
		catalog := Dictionary new.
				
		prices keysDo: [:isbn | | value |
			value := (Dictionary new 
				at: 'price'  put: (prices at: isbn);
				at: 'title'  put: (titles at: isbn);
				yourself).
			
			catalog at: isbn put: value
		].
		
		catalog.
	]! !
!TusLibrosServerServices methodsFor: 'service handler' stamp: 'ENC 7/8/2021 15:08:13' prior: 51015748!
catalogHandler

	^ [ :request | | titles prices catalog |
		prices := facade catalog.
		titles := factory defaultTitlesCatalog.
		catalog := Dictionary new.
				
		prices keysDo: [ :isbn | | value |
			value := (Dictionary new 
				at: 'price'  put: (prices at: isbn);
				at: 'title'  put: (titles at: isbn);
				yourself).
			
			catalog at: isbn put: value
		].
		
		catalog.
	]! !
!TusLibrosServerServices methodsFor: 'service handler' stamp: 'ENC 7/8/2021 15:08:30' prior: 51014149!
listCartHandler

	^ [ :request | | idCart listCart |
		idCart := (request fields at: 'id').
		
		listCart := facade listCartIdentifiedAs: (idCart asNumber).
		
		listCart asArray 
	]! !
!TusLibrosServerServices methodsFor: 'service handler' stamp: 'ENC 7/8/2021 15:08:50' prior: 51014181!
removeFromCartHandler

	^ [ :request | | idCart isbn quantity |
		isbn := (request fields at:'isbn').
		quantity := (request fields at:'quantity').
		idCart := (request fields at:'id').
		
		facade remove: (quantity asNumber) of: isbn toCartIdentifiedAs: (idCart asNumber).
		
		'OK'.
	]! !
!TusLibrosServerServices methodsFor: 'service handler' stamp: 'ENC 7/8/2021 15:08:56' prior: 51014108!
addToCartHandler

	^ [ :request | | idCart isbn quantity |
		isbn := (request fields at:'isbn').
		quantity := (request fields at:'quantity').
		idCart := (request fields at:'id').
		
		facade add: (quantity asNumber) of: isbn toCartIdentifiedAs: (idCart asNumber).
		
		'OK'.
	]! !

TusLibrosRestInterface allInstances.!

TusLibrosRestInterface allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServerServices allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServerServices allInstances.!

TusLibrosServerServices allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServerServices allInstances.!

TusLibrosServerServices allInstancesDo: [ :instance | instance destroy ].
!

TusLibrosServerServices allInstances.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:11:13' prior: 51015648!
port
	
	^ port ifNil: [ port := 8081 ].! !

server := TusLibrosServerServices listeningOn: 8081.
!

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientErrorWindow methodsFor: 'logo' stamp: 'ENC 7/8/2021 15:16:01' prior: 51009915!
logo
	^'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'! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientErrorWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:16:43' prior: 51011530 overrides: 50973411!
defaultExtent

	^ 600@800
	! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:24:52' prior: 51015130!
buildCatalogItemsRow

	| catalogItemsRow catalogItemsMorph |
	
	catalogItemsMorph := PluggableListMorph model: self model listGetter: #catalogItems indexGetter: #catalogItemIndex indexSetter: #catalogItemIndex:.
	catalogItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:600; morphHeight:500.
		
	catalogItemsRow := LayoutMorph newColumn.
	catalogItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogItemsMorph;
	addMorph: self buildAddQuantitySelector.
		
	^ catalogItemsRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:25:05' prior: 51014824!
buildCartItemsRow

	| cartItemsRow |
	
	cartItemsMorph := PluggableListMorph model: self model listGetter: #cartItems indexGetter: #cartItemIndex indexSetter: #cartItemIndex:.
	cartItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:600; morphHeight:500.
		
	cartItemsRow := LayoutMorph newColumn.
	cartItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartItemsMorph;
	addMorph: self buildRemoveQuantitySelector.
		
	^ cartItemsRow.! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:27:12' prior: 51015308 overrides: 50973325!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUsernameRow;
	addMorph: (LabelMorph contents:'Purchases detail');
	addMorph: self buildPurchasesRow;
	addMorph: self buildTotalesRow.
	! !
!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:35:12' prior: 51017264 overrides: 50973325!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUsernameRow;
	addMorph: (LabelMorph contents: 'Purchases detail');
	addMorph: self buildPurchasesRow;
	addMorph: self buildTotalesRow.
	! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:38:10' prior: 51012979!
buildLoginButtonRow
	| loginButtonMorph loginButtonLayoutMorph |
	
	loginButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create cart'.
	
	loginButtonLayoutMorph := LayoutMorph newRow.
	loginButtonLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: loginButtonMorph;
	morphExtent: `120@100`.
	
	^loginButtonLayoutMorph.
	
	! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:39:06' prior: 51015108 overrides: 50973325!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 3;
	axisEdgeWeight: 0;
	addMorph: self buildRecordRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCheckoutRow.
	! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:39:32' prior: 51017306 overrides: 50973325!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 10;
	axisEdgeWeight: 0;
	addMorph: self buildRecordRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCheckoutRow.
	! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:06' prior: 51017242!
buildCartItemsRow

	| cartItemsRow |
	
	cartItemsMorph := PluggableListMorph model: self model listGetter: #cartItems indexGetter: #cartItemIndex indexSetter: #cartItemIndex:.
	cartItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400; morphHeight:500.
		
	cartItemsRow := LayoutMorph newColumn.
	cartItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartItemsMorph;
	addMorph: self buildRemoveQuantitySelector.
		
	^ cartItemsRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:10' prior: 51017329!
buildCartItemsRow

	| cartItemsRow |
	
	cartItemsMorph := PluggableListMorph model: self model listGetter: #cartItems indexGetter: #cartItemIndex indexSetter: #cartItemIndex:.
	cartItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400; morphHeight:400.
		
	cartItemsRow := LayoutMorph newColumn.
	cartItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartItemsMorph;
	addMorph: self buildRemoveQuantitySelector.
		
	^ cartItemsRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:19' prior: 51017221!
buildCatalogItemsRow

	| catalogItemsRow catalogItemsMorph |
	
	catalogItemsMorph := PluggableListMorph model: self model listGetter: #catalogItems indexGetter: #catalogItemIndex indexSetter: #catalogItemIndex:.
	catalogItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400; morphHeight:400.
		
	catalogItemsRow := LayoutMorph newColumn.
	catalogItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogItemsMorph;
	addMorph: self buildAddQuantitySelector.
		
	^ catalogItemsRow.! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:47' prior: 51015151!
buildRemoveQuantitySelector

	| removeQuantitySelectorRow removeItemPluggableButtonMorph removeQuantityTextBoxMorph |
	
	removeItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #removeFromCart  label: 'Remove'.
	
	removeQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #removeQuantity textSetter: #removeQuantity:. 
	removeQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | removeQuantityTextBoxMorph textMorph acceptContents ].
	removeQuantityTextBoxMorph borderWidth: 1; borderColor: Color skyBlue; morphWidth: 100; morphHeight: 20.
				
	removeQuantitySelectorRow := LayoutMorph newRow.
	removeQuantitySelectorRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Remove from cart');
	addMorph: removeQuantityTextBoxMorph;
	addMorph: removeItemPluggableButtonMorph.
		
	^removeQuantitySelectorRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:52' prior: 51015183!
buildAddQuantitySelector

	| addQuantitySelectorRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 100; morphHeight: 20.
				
	addQuantitySelectorRow := LayoutMorph newRow.
	addQuantitySelectorRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^ addQuantitySelectorRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:58' prior: 51017422!
buildAddQuantitySelector

	| addQuantitySelectorRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 100; morphHeight: 20.
				
	addQuantitySelectorRow := LayoutMorph newRow.
	addQuantitySelectorRow separation: 10; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^ addQuantitySelectorRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:41:04' prior: 51017390!
buildRemoveQuantitySelector

	| removeQuantitySelectorRow removeItemPluggableButtonMorph removeQuantityTextBoxMorph |
	
	removeItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #removeFromCart  label: 'Remove'.
	
	removeQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #removeQuantity textSetter: #removeQuantity:. 
	removeQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | removeQuantityTextBoxMorph textMorph acceptContents ].
	removeQuantityTextBoxMorph borderWidth: 1; borderColor: Color skyBlue; morphWidth: 100; morphHeight: 20.
				
	removeQuantitySelectorRow := LayoutMorph newRow.
	removeQuantitySelectorRow separation: 10; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Remove from cart');
	addMorph: removeQuantityTextBoxMorph;
	addMorph: removeItemPluggableButtonMorph.
		
	^removeQuantitySelectorRow.! !
!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:41:31' prior: 51015066!
buildCheckoutRow

	| checkOutButtonMorph checkOutLayoutMorph |
	
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 50;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
			
	^ checkOutLayoutMorph.
	! !

window := TusLibrosClientCreateCartWindow open.
!

!methodRemoval: TusLibrosClientCatalogWindow #buildCheckoutAndRecordRow stamp: 'ENC 7/8/2021 15:42:02'!
buildCheckoutAndRecordRow

	checkoutRowLayoutMorph := LayoutMorph newRow.
	checkoutRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: self buildCheckoutRow;
 	addMorph: self buildRecordRow.
	
	checkoutRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^ checkoutRowLayoutMorph.
	!
!TusLibrosClientCreateCartWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:43:51' prior: 51012931!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientCreateCartWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self color: Color green.
	self yourself.
				
	! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCreateCartWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:44:59' prior: 51017543!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientCreateCartWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self color: (Color r: 174 g: 234 b: 36).
	self yourself.
				
	! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCreateCartWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:45:16' prior: 51017558!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientCreateCartWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self color: (Color r: 174 g: 234 b: 36 alpha: 1).
	self yourself.
				
	! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientCreateCartWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:45:28' prior: 51017573!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientCreateCartWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self color: Color white.
	self yourself.
				
	! !

	self color: Color white.!

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientErrorWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:45:58' prior: 51015275!
initializeWith: anErrorMessage errorTitle: aTitle
	
	errorMessage := anErrorMessage.
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Exception on ', aTitle.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self color: Color white.
	self yourself.
			! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosClientErrorWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:46:18' prior: 51017215 overrides: 50973411!
defaultExtent

	^ 600@600
	! !

window := TusLibrosClientCreateCartWindow open.
!
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove to cart' stamp: 'ENC 7/8/2021 15:58:16' prior: 51009205!
test20CanNotRemoveItemZeroTimes

	| cartID |

	cartID := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartID.
	
	self  should:  [ systemFacade remove: 0 of: self validBook toCartIdentifiedAs: cartID ]
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cart invalidQuantityErrorMessage .
			self assert: ((systemFacade listCartIdentifiedAs: cartID) occurrencesOf: self validBook) equals: 1.
		].
	
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove to cart' stamp: 'ENC 7/8/2021 15:58:34' prior: 51009226!
test21CanNotRemoveItemMoreThanTheAvailableQuantity

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	
	self  should:  [ systemFacade remove: 5 of: self validBook toCartIdentifiedAs: cartId ]
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cart invalidQuantityErrorMessage .
			self assert: ((systemFacade listCartIdentifiedAs: cartId) occurrencesOf: self validBook) equals: 1.
		].
	
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove to cart' stamp: 'ENC 7/8/2021 15:58:37' prior: 51017650!
test21CanNotRemoveItemMoreThanTheAvailableQuantity

	| cartID |

	cartID := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartID.
	
	self  should:  [ systemFacade remove: 5 of: self validBook toCartIdentifiedAs: cartID ]
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cart invalidQuantityErrorMessage .
			self assert: ((systemFacade listCartIdentifiedAs: cartID) occurrencesOf: self validBook) equals: 1.
		].
	
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove to cart' stamp: 'ENC 7/8/2021 15:58:57' prior: 51017672!
test21CanNotRemoveItemMoreThanTheAvailableQuantity

	| cartID |

	cartID := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartID.
	
	self  should:  [ systemFacade remove: 5 of: self anotherValidBook toCartIdentifiedAs: cartID ]
		raise:  Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cart invalidQuantityErrorMessage .
			self assert: ((systemFacade listCartIdentifiedAs: cartID) occurrencesOf: self anotherValidBook) equals: 1.
		].
	
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove to cart' stamp: 'ENC 7/8/2021 15:59:09' prior: 51017694!
test21CanNotRemoveItemMoreThanTheAvailableQuantity

	| cartID |

	cartID := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self anotherValidBook toCartIdentifiedAs: cartID.
	
	self  should:  [ systemFacade remove: 5 of: self anotherValidBook toCartIdentifiedAs: cartID ]
		raise:  Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cart invalidQuantityErrorMessage .
			self assert: ((systemFacade listCartIdentifiedAs: cartID) occurrencesOf: self anotherValidBook) equals: 1.
		].
	
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove to cart' stamp: 'ENC 7/8/2021 15:59:12' prior: 51017628!
test20CanNotRemoveItemZeroTimes

	| cartID |

	cartID := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartID.
	
	self  should:  [ systemFacade remove: 0 of: self validBook toCartIdentifiedAs: cartID ]
		raise:  Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: Cart invalidQuantityErrorMessage .
			self assert: ((systemFacade listCartIdentifiedAs: cartID) occurrencesOf: self validBook) equals: 1.
		].
	
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - remove to cart' stamp: 'ENC 7/8/2021 16:00:15' prior: 51009248!
test22RemoveItemsTakesThemOutFromACreatedCart

	| cartId |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 2 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade remove: 1 of: self validBook toCartIdentifiedAs: cartId.
	
	self assert: ((systemFacade listCartIdentifiedAs: cartId) occurrencesOf: self validBook) equals: 1.
	
	
		! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'ENC 7/8/2021 16:01:48' prior: 51009293!
test15CanNotListPurchasesOfInvalidCustomer

	self
		should: [systemFacade listPurchasesOf: self invalidUser authenticatingWith: self validUserPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'ENC 7/8/2021 16:01:54' prior: 51017777!
test15CanNotListPurchasesOfInvalidCustomer

	self
		should: [systemFacade listPurchasesOf: self invalidUser authenticatingWith: self validUserPassword ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'ENC 7/8/2021 16:01:58' prior: 51017790!
test15CanNotListPurchasesOfInvalidCustomer

	self
		should: [ systemFacade listPurchasesOf: self invalidUser authenticatingWith: self validUserPassword ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'ENC 7/8/2021 16:02:18' prior: 51009307!
test16CanNotListPurchasesOfValidCustomerWithInvalidPassword

	self
		should: [systemFacade listPurchasesOf: self validUser authenticatingWith: self invalidPassword ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'ENC 7/8/2021 16:02:21' prior: 51017816!
test16CanNotListPurchasesOfValidCustomerWithInvalidPassword

	self
		should: [systemFacade listPurchasesOf: self validUser authenticatingWith: self invalidPassword ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'ENC 7/8/2021 16:02:23' prior: 51017830!
test16CanNotListPurchasesOfValidCustomerWithInvalidPassword

	self
		should:  [systemFacade listPurchasesOf: self validUser authenticatingWith: self invalidPassword ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'ENC 7/8/2021 16:02:29' prior: 51017844!
test16CanNotListPurchasesOfValidCustomerWithInvalidPassword

	self
		should: [ systemFacade listPurchasesOf: self validUser authenticatingWith: self invalidPassword ]
		raise: Error
		withExceptionDo: [ :anError | self assert: anError messageText equals: systemFacade invalidUserAndOrPasswordErrorDescription ]! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - list purchases' stamp: 'ENC 7/8/2021 16:03:15' prior: 51009264!
test14ListPurchasesIncludesAcquiredItems

	| cartId purchases |

	cartId := systemFacade createCartFor: self validUser authenticatedWith: self validUserPassword.
	systemFacade add: 1 of: self validBook toCartIdentifiedAs: cartId.
	systemFacade add: 3 of: self anotherValidBook toCartIdentifiedAs: cartId.
	systemFacade
		checkOutCartIdentifiedAs: cartId
		withCreditCardNumbered: '1111222233334444'
		ownedBy: 'Juan Perez'
		expiringOn: testObjectsFactory notExpiredMonthOfYear.

	purchases := systemFacade listPurchasesOf: self validUser authenticatingWith: self validUserPassword.

	self assert: ((purchases at: self validBook) at: 'total') equals: testObjectsFactory itemSellByTheStorePrice.
	self assert: ((purchases at: self anotherValidBook) at: 'total') equals: (testObjectsFactory anotherItemSellByTheStorePrice * 3).! !
!TusLibrosSystemFacade methodsFor: 'accesing' stamp: 'ENC 7/8/2021 16:04:41' prior: 51008841!
catalog 

	^ catalog! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'ENC 7/8/2021 16:05:00' prior: 51008800!
list: aSale on: salesOrderedByBook

	"Esto es un indicio de que por ahi conviene empezar a pensar en modelar un SaleBook - Hernan"
	aSale lineItemsDo: [ :aLineItem | | saleInfo |
		saleInfo := salesOrderedByBook at: aLineItem item ifAbsentPut: [ Dictionary newFromPairs: {'total'. 0. 'quantity'. 0.} ].
		saleInfo at:'total' put: ((saleInfo at: 'total') + aLineItem total).
		saleInfo at:'quantity' put: ((saleInfo at: 'quantity') + aLineItem quantity).
	]! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 16:06:36'!
sendCreateCartRequestWith: aUsername password: aPassword

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'username'. aUsername. 'password'. aPassword.}.		
	
	^ self send: fieldDict to: '/login'! !
!TusLibrosClientTicketWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/8/2021 16:06:36' prior: 51015614!
createNewCart

	| cartID |
	
	self triggerEvent: #close with: self.
	cartID := restInterface sendCreateCartRequestWith: username password: password.
	
	TusLibrosClientCatalogWindow openWith: username password: password for: cartID.! !
!TusLibrosClientCreateCartWindowModel methodsFor: 'as yet unclassified' stamp: 'ENC 7/8/2021 16:06:36' prior: 51015235!
sendCreateCartRequest
	
	| cartID |
	
	[
		cartID := restInterface sendCreateCartRequestWith: username password: password.
		TusLibrosClientCatalogWindow openWith: username password: password for: cartID.		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Not valid credentials' title: 'login' .
	].
	! !

!methodRemoval: TusLibrosRestInterface #sendLoginRequestWith:password: stamp: 'ENC 7/8/2021 16:06:36'!
sendLoginRequestWith: aUsername password: aPassword

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'username'. aUsername. 'password'. aPassword.}.		
	
	^ self send: fieldDict to: '/login'!
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 16:06:42' prior: 51017923!
sendCreateCartRequestWith: aUsername password: aPassword

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'username'. aUsername. 'password'. aPassword.}.		
	
	^ self send: fieldDict to: '/createCart'! !
!TusLibrosServerServices methodsFor: 'service handler' stamp: 'ENC 7/8/2021 16:07:03'!
createCartHandler

	^ [ :request | | username password idCart |
		username := (request fields at:'username').
		password := (request fields at:'password').
		
		idCart := facade createCartFor: username  authenticatedWith: password.
		
		idCart
	]! !
!TusLibrosServerServices methodsFor: 'as yet unclassified' stamp: 'ENC 7/8/2021 16:07:03' prior: 51014087!
initializeWithPort: aPortNumber 

	self initializeFacade.

	port := aPortNumber.
	webServer := WebServer new listenOn: port.

	self addService: '/catalog' action: self catalogHandler.
	self addService: '/login' action: self createCartHandler.
	self addService: '/addToCart' action: self addToCartHandler.
	self addService: '/removeFromCart' action: self removeFromCartHandler.
	self addService: '/checkOut' action: self checkOutHandler.
	self addService: '/listPurchases' action: self listPurchasesHandler.
	self addService: '/listCart' action: self listCartHandler.! !

!methodRemoval: TusLibrosServerServices #loginHandler stamp: 'ENC 7/8/2021 16:07:03'!
loginHandler

	^ [ :request | | username password idCart |
		username := (request fields at:'username').
		password := (request fields at:'password').
		
		idCart := facade createCartFor: username  authenticatedWith: password.
		
		idCart
	]!
!TusLibrosServerServices methodsFor: 'initialization' stamp: 'ENC 7/8/2021 16:07:15' prior: 51017991!
initializeWithPort: aPortNumber 

	self initializeFacade.

	port := aPortNumber.
	webServer := WebServer new listenOn: port.

	self addService: '/catalog' action: self catalogHandler.
	self addService: '/createCart' action: self createCartHandler.
	self addService: '/addToCart' action: self addToCartHandler.
	self addService: '/removeFromCart' action: self removeFromCartHandler.
	self addService: '/checkOut' action: self checkOutHandler.
	self addService: '/listPurchases' action: self listPurchasesHandler.
	self addService: '/listCart' action: self listCartHandler.! !

TusLibrosClientCreateCartWindow open.!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'ENC 7/8/2021 16:08:07' prior: 51015830!
port
	
	^ port ifNil: [ port := 8080 ].! !

TusLibrosClientCreateCartWindow open.!

TusLibrosServerServices allInstances.!
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 16:09:57' prior: 51017969!
sendCreateCartRequestWith: aUsername password: aPassword

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'username'. aUsername. 'password'. aPassword.}.		
	
	^ self send: fieldDict to: '/createCart'! !

TusLibrosServerServices allInstancesDo: [:instance|instance destroy].!

TusLibrosServerServices allInstances.!

server := TusLibrosServerServices listeningOn: 8080.!

window := TusLibrosClientCreateCartWindow open.!
!TusLibrosClientCreateCartWindowModel methodsFor: 'PluggableButtonSelectors' stamp: 'ENC 7/8/2021 16:12:46' prior: 51017946!
sendCreateCartRequest
	
	| cartID |
	
	[
		cartID := restInterface sendCreateCartRequestWith: username password: password.
		TusLibrosClientCatalogWindow openWith: username password: password for: cartID.		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Not valid credentials' title: 'create cart' .
	].
	! !
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 16:14:02' prior: 51018054!
sendCreateCartRequestWith: aUsername password: aPassword

	| fieldDict response |

	fieldDict := Dictionary newFromPairs: {'username'. aUsername. 'password'. aPassword.}.		
	
	response := WebClient htmlSubmit: (self url, '/createCart') fields: fieldDict.
	
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)). ] 
		ifFalse: [ ^self error: response content ].! !

window := TusLibrosClientCreateCartWindow open.!

TusLibrosServerServices allInstances.
!

server := TusLibrosServerServices listeningOn: 8082.
!
!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'ENC 7/8/2021 16:15:40' prior: 51018046!
port
	
	^ port ifNil: [ port := 8082 ].! !

window := TusLibrosClientCreateCartWindow open.!
!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 16:09:57' prior: 51018086!
sendCreateCartRequestWith: aUsername password: aPassword

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'username'. aUsername. 'password'. aPassword.}.		
	
	^ self send: fieldDict to: '/createCart'! !

window := TusLibrosClientCreateCartWindow open.!
!TusLibrosServerServices methodsFor: 'initialization' stamp: 'ENC 7/8/2021 16:17:19' prior: 51018023!
initializeWithPort: aPortNumber 

	self initializeFacade.

	port := aPortNumber.
	webServer := WebServer new listenOn: port.

	self addService: '/addToCart' action: self addToCartHandler.
	self addService: '/catalog' action: self catalogHandler.
	self addService: '/checkOut' action: self checkOutHandler.
	self addService: '/createCart' action: self createCartHandler.
	self addService: '/listCart' action: self listCartHandler.
	self addService: '/listPurchases' action: self listPurchasesHandler.
	self addService: '/removeFromCart' action: self removeFromCartHandler.
	! !

----QUIT----(8 July 2021 16:31:53) CuisUniversity-4532.image priorSource: 21701101!