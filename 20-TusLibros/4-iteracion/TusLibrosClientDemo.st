!classDefinition: #TusLibrosClientCatalogWindow category: 'TusLibrosClientDemo'!
Panel subclass: #TusLibrosClientCatalogWindow
	instanceVariableNames: 'cartItemsMorph addQuantityTextBoxMorph checkoutRowLayoutMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:58'!
buildAddQuantitySelector

	| addQuantitySelectorRow addItemPluggableButtonMorph |
	
	addItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #addToCart  label: 'Add'.
	
	addQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #addQuantity textSetter: #addQuantity:. 
	addQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | addQuantityTextBoxMorph textMorph acceptContents ] .
	addQuantityTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 100; morphHeight: 20.
				
	addQuantitySelectorRow := LayoutMorph newRow.
	addQuantitySelectorRow separation: 10; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Add to cart');
	addMorph: addQuantityTextBoxMorph;
	addMorph: addItemPluggableButtonMorph.
		
	^ addQuantitySelectorRow.! !

!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:10'!
buildCartItemsRow

	| cartItemsRow |
	
	cartItemsMorph := PluggableListMorph model: self model listGetter: #cartItems indexGetter: #cartItemIndex indexSetter: #cartItemIndex:.
	cartItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400; morphHeight:400.
		
	cartItemsRow := LayoutMorph newColumn.
	cartItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Cart');
	addMorph: cartItemsMorph;
	addMorph: self buildRemoveQuantitySelector.
		
	^ cartItemsRow.! !

!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:51:14'!
buildCatalogAndCartRow

	| catalogAndCartRow |
	
	catalogAndCartRow := LayoutMorph newRow.
	catalogAndCartRow separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildCatalogItemsRow;
	addMorph: self buildCartItemsRow.
	
	catalogAndCartRow layoutSpec proportionalHeight: 100.
	
	^ catalogAndCartRow.! !

!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:40:19'!
buildCatalogItemsRow

	| catalogItemsRow catalogItemsMorph |
	
	catalogItemsMorph := PluggableListMorph model: self model listGetter: #catalogItems indexGetter: #catalogItemIndex indexSetter: #catalogItemIndex:.
	catalogItemsMorph  borderColor: Color skyBlue; borderWidth: 1; morphWidth:400; morphHeight:400.
		
	catalogItemsRow := LayoutMorph newColumn.
	catalogItemsRow separation: 5; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Catalog');
	addMorph: catalogItemsMorph;
	addMorph: self buildAddQuantitySelector.
		
	^ catalogItemsRow.! !

!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:41:31'!
buildCheckoutRow

	| checkOutButtonMorph checkOutLayoutMorph |
	
	checkOutButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #checkOutCartRequest  label: 'Checkout' .
		
	checkOutLayoutMorph := LayoutMorph newRow.
	checkOutLayoutMorph morphWidth: 50;
	axisEdgeWeight: 0.5;
	addMorph: checkOutButtonMorph.
			
	^ checkOutLayoutMorph.
	! !

!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:39:32'!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 10;
	axisEdgeWeight: 0;
	addMorph: self buildRecordRow;
	addMorph: self buildCatalogAndCartRow;
	addMorph: self buildCheckoutRow.
	! !

!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:53:19'!
buildRecordRow

	| purchasesButtonMorph purchasesLayoutMorph |
	
	purchasesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #listPurchasesRequest  label: 'Record'.
	
	purchasesLayoutMorph := LayoutMorph newRow.
	purchasesLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: purchasesButtonMorph.
			
	^ purchasesLayoutMorph.
	! !

!TusLibrosClientCatalogWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:41:04'!
buildRemoveQuantitySelector

	| removeQuantitySelectorRow removeItemPluggableButtonMorph removeQuantityTextBoxMorph |
	
	removeItemPluggableButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #removeFromCart  label: 'Remove'.
	
	removeQuantityTextBoxMorph := TextModelMorph textProvider: self model textGetter: #removeQuantity textSetter: #removeQuantity:. 
	removeQuantityTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | removeQuantityTextBoxMorph textMorph acceptContents ].
	removeQuantityTextBoxMorph borderWidth: 1; borderColor: Color skyBlue; morphWidth: 100; morphHeight: 20.
				
	removeQuantitySelectorRow := LayoutMorph newRow.
	removeQuantitySelectorRow separation: 10; 
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Remove from cart');
	addMorph: removeQuantityTextBoxMorph;
	addMorph: removeItemPluggableButtonMorph.
		
	^removeQuantitySelectorRow.! !


!TusLibrosClientCatalogWindow methodsFor: 'initialization' stamp: 'ENC 7/6/2021 00:26:12'!
defaultExtent

	^ 1300@800
	! !

!TusLibrosClientCatalogWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:49:44'!
initializeOpenWith: aUsername password: aPassword for: aCartID 

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'TusLibros - Catalog'.
	self model: (TusLibrosClientCatalogWindowModel with: aUsername password: aPassword for: aCartID ).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
				
	self model when: #cartUpdate send: #refreshCart to: self.
	self model when: #close send: #closeButtonClicked to: self.! !

!TusLibrosClientCatalogWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:50:26'!
refreshCart

	cartItemsMorph updateList.
	cartItemsMorph setSelectionIndex: 1.
	
	! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosClientCatalogWindow class' category: 'TusLibrosClientDemo'!
TusLibrosClientCatalogWindow class
	instanceVariableNames: ''!

!TusLibrosClientCatalogWindow class methodsFor: 'instance creation' stamp: 'ENC 7/1/2021 18:30:15'!
open
	
	^self new initializeWith: 'Catalog Window'.! !

!TusLibrosClientCatalogWindow class methodsFor: 'instance creation' stamp: 'ENC 7/1/2021 18:46:39'!
openWith: aUsername password: aPassword for: aCartID 
	^self new initializeOpenWith: aUsername password: aPassword for: aCartID. ! !


!classDefinition: #TusLibrosClientCreateCartWindow category: 'TusLibrosClientDemo'!
Panel subclass: #TusLibrosClientCreateCartWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientCreateCartWindow methodsFor: 'access' stamp: 'ENC 7/7/2021 22:25:14'!
logo
	^'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'! !


!TusLibrosClientCreateCartWindow methodsFor: 'initialization' stamp: 'ENC 6/29/2021 00:22:03'!
defaultExtent

	^ 600@700
	! !

!TusLibrosClientCreateCartWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:45:28'!
initializeWith: aTitle

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: aTitle.
	self model: (TusLibrosClientCreateCartWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self color: Color white.
	self yourself.
				
	! !


!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:38:10'!
buildLoginButtonRow
	| loginButtonMorph loginButtonLayoutMorph |
	
	loginButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #sendCreateCartRequest  label: 'Create cart'.
	
	loginButtonLayoutMorph := LayoutMorph newRow.
	loginButtonLayoutMorph separation: 25;
	axisEdgeWeight: 0.5;
	addMorph: loginButtonMorph;
	morphExtent: `120@100`.
	
	^loginButtonLayoutMorph.
	
	! !

!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:25:14'!
buildLoginInputPasswordRow
	| passwordTextBoxMorph loginPasswordLayoutMorph |
	
	passwordTextBoxMorph := TextModelMorph textProvider: self model textGetter: #password textSetter: #password:. 
	passwordTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | passwordTextBoxMorph textMorph acceptContents ] .
	passwordTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20 . 
		
	loginPasswordLayoutMorph := LayoutMorph newRow.
	loginPasswordLayoutMorph separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Password:');
	addMorph: passwordTextBoxMorph.
	
	^loginPasswordLayoutMorph
	! !

!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:39:30'!
buildLoginInputRow
	| loginInputRowLayoutMorph |
	
	loginInputRowLayoutMorph := LayoutMorph newColumn.
	loginInputRowLayoutMorph separation: 1;
	axisEdgeWeight: 0.5;
	addMorph: self buildLoginInputUsernameRow;
	addMorph: self buildLoginInputPasswordRow.
	
	^loginInputRowLayoutMorph.
	! !

!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 19:24:27'!
buildLoginInputUsernameRow
	| usernameTextBoxMorph loginUsernameLayoutMorph |
	
	usernameTextBoxMorph := TextModelMorph textProvider: self model textGetter: #username textSetter: #username:. 
	usernameTextBoxMorph textMorph setProperty: #keyStroke: toValue: [ :key | usernameTextBoxMorph textMorph acceptContents ] .
	usernameTextBoxMorph  borderWidth: 1; borderColor: Color skyBlue; morphWidth: 300; morphHeight: 20 . 
		
	loginUsernameLayoutMorph := LayoutMorph newRow.
	loginUsernameLayoutMorph separation: 15;
	axisEdgeWeight: 0.5;
	addMorph: (LabelMorph contents:'Username:');
	addMorph: usernameTextBoxMorph.
	
	^loginUsernameLayoutMorph! !

!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 6/29/2021 00:30:12'!
buildLoginRow
	| secondRowLayoutMorph |
	
	secondRowLayoutMorph := LayoutMorph newColumn.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildLoginInputRow;
	addMorph: self buildLoginButtonRow.
	
	^secondRowLayoutMorph.
	! !

!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 7/7/2021 22:26:21'!
buildLogoRow
	| storeLogoMorph firstRowLayoutMorph |

	storeLogoMorph := ImageMorph new.
	storeLogoMorph image: (Form fromBinaryStream: self logo base64Decoded asByteArray readStream).
	storeLogoMorph morphExtent: 150@100.
	
		
	firstRowLayoutMorph := LayoutMorph newColumn.
	firstRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: storeLogoMorph.
	
	^firstRowLayoutMorph.! !

!TusLibrosClientCreateCartWindow methodsFor: 'GUI building' stamp: 'ENC 6/29/2021 00:06:15'!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildLogoRow;
	addMorph: self buildLoginRow.
	! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosClientCreateCartWindow class' category: 'TusLibrosClientDemo'!
TusLibrosClientCreateCartWindow class
	instanceVariableNames: ''!

!TusLibrosClientCreateCartWindow class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 20:46:13'!
open
	
	^self new initializeWith: 'TusLibros'.! !


!classDefinition: #TusLibrosClientErrorWindow category: 'TusLibrosClientDemo'!
Panel subclass: #TusLibrosClientErrorWindow
	instanceVariableNames: 'errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientErrorWindow methodsFor: 'logo' stamp: 'ENC 7/8/2021 15:16:01'!
logo
	^''! !


!TusLibrosClientErrorWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:58:14'!
buildErrorRow

	| errorLogoMorph errorRowLayoutMorph |

	errorLogoMorph := ImageMorph new.
	errorLogoMorph image: (Form fromBinaryStream: self logo base64Decoded asByteArray readStream).	
		
	errorRowLayoutMorph := LayoutMorph newRow.
	errorRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: errorLogoMorph.
	
	errorRowLayoutMorph layoutSpec fixedWidth: 300.
	
	^ errorRowLayoutMorph.! !

!TusLibrosClientErrorWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:58:20'!
buildMorphicWindow
		
	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildErrorRow;
	addMorph: (LabelMorph contents: 'Error: ', errorMessage).
	! !


!TusLibrosClientErrorWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:46:18'!
defaultExtent

	^ 600@600
	! !

!TusLibrosClientErrorWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:45:58'!
initializeWith: anErrorMessage errorTitle: aTitle
	
	errorMessage := anErrorMessage.
	
	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Exception on ', aTitle.
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self color: Color white.
	self yourself.
			! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosClientErrorWindow class' category: 'TusLibrosClientDemo'!
TusLibrosClientErrorWindow class
	instanceVariableNames: ''!

!TusLibrosClientErrorWindow class methodsFor: 'instance creation' stamp: 'ENC 7/7/2021 19:04:22'!
openWith: anErrorMessage title: anErrorTitle
	^self new initializeWith: anErrorMessage errorTitle: anErrorTitle
	! !


!classDefinition: #TusLibrosClientPurchasesWindow category: 'TusLibrosClientDemo'!
Panel subclass: #TusLibrosClientPurchasesWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientPurchasesWindow methodsFor: 'initialization' stamp: 'ENC 7/6/2021 22:29:25'!
defaultExtent

	^ 400@600
	! !

!TusLibrosClientPurchasesWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:58:59'!
initializeWith: aUsername password: aPassword purchases: aListOfPurchases

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Purchases record'.
	self model: (TusLibrosClientPurchasesWindowModel with: aUsername password: aPassword purchases: aListOfPurchases ).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
	self model when: #close send: #closeButtonClicked to: self.! !


!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:35:12'!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildUsernameRow;
	addMorph: (LabelMorph contents: 'Purchases detail');
	addMorph: self buildPurchasesRow;
	addMorph: self buildTotalesRow.
	! !

!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:22'!
buildPurchasesRow

	| purchasesMorph |

	purchasesMorph := PluggableListMorph model: self model listGetter: #purchases indexGetter: #purchaseIndex indexSetter: #purchaseIndex:.
	purchasesMorph borderWidth: 1;morphWidth:350; morphHeight:400.
	
	^ purchasesMorph! !

!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:32'!
buildTotalesRow

	^ LabelMorph contents: 'Total: $', self model total.! !

!TusLibrosClientPurchasesWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 14:59:39'!
buildUsernameRow

	^ LabelMorph contents: 'Client: ', self model username.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosClientPurchasesWindow class' category: 'TusLibrosClientDemo'!
TusLibrosClientPurchasesWindow class
	instanceVariableNames: ''!

!TusLibrosClientPurchasesWindow class methodsFor: 'instance creation' stamp: 'ENC 7/6/2021 22:08:13'!
openWith: aUsername password: aPassword purchases: aListOfPurchases
	^self new initializeWith: aUsername password: aPassword purchases: aListOfPurchases.! !


!classDefinition: #TusLibrosClientTicketWindow category: 'TusLibrosClientDemo'!
Panel subclass: #TusLibrosClientTicketWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:00:48'!
buildMorphicWindow

	self layoutMorph beColumn;
	separation: 15;
	axisEdgeWeight: 0;
	addMorph: self buildTicketRow;
	addMorph: self buildNextRow.
	! !

!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:00:51'!
buildNextButtonsRow

	| noButtonMorph nextButtonsRow yesButtonMorph |
	
	yesButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #createNewCart  label: 'Create new cart'.
	noButtonMorph := PluggableButtonMorph model: self model stateGetter: nil action: #logOut  label: 'Logout'.
		
	nextButtonsRow := LayoutMorph newRow.
	nextButtonsRow morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: yesButtonMorph;
 	addMorph: noButtonMorph.
	nextButtonsRow layoutSpec proportionalWidth: 10.
	
	^nextButtonsRow.
	! !

!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:00:57'!
buildNextQuestionRow

	^ LabelMorph contents:'What do you wanna do?'.
	! !

!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:01:03'!
buildNextRow

	| secondRowLayoutMorph |
	
	secondRowLayoutMorph := LayoutMorph newColumn.
	secondRowLayoutMorph separation: 5;
	axisEdgeWeight: 0.5;
	addMorph: self buildNextQuestionRow;
	addMorph: self buildNextButtonsRow.
	
	secondRowLayoutMorph layoutSpec proportionalHeight: 100.
	
	^ secondRowLayoutMorph.! !

!TusLibrosClientTicketWindow methodsFor: 'GUI building' stamp: 'ENC 7/8/2021 15:01:12'!
buildTicketRow

	| ticketRowLayoutMorph ticketLineMorph |
	
	ticketLineMorph := PluggableListMorph model: self model listGetter: #ticket indexGetter: #ticketLineIndex indexSetter: #ticketLineIndex:.
	ticketLineMorph borderWidth: 1;morphWidth:500; morphHeight:600.
		
	ticketRowLayoutMorph := LayoutMorph newColumn.
	ticketRowLayoutMorph morphWidth: 200;
	axisEdgeWeight: 0.5;
	addMorph: ticketLineMorph;
	addMorph: (LabelMorph contents:'Total: $', self model total).

	ticketRowLayoutMorph layoutSpec proportionalWidth: 10.
	
	^ ticketRowLayoutMorph.
	! !


!TusLibrosClientTicketWindow methodsFor: 'initialization' stamp: 'ENC 7/6/2021 21:21:47'!
defaultExtent

	^ 600@800! !

!TusLibrosClientTicketWindow methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:01:21'!
initializeOpenWith: aUsername password: aPassword ticket: aCartID 

	self titleMorph showButtonsNamed: #( close collapse ).
	self setLabel: 'Purchase detail'.
	self model: (TusLibrosClientTicketWindowModel with: aUsername password: aPassword with: aCartID ).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
	self yourself.
			
	self model when: #close send: #closeButtonClicked to: self.
	! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosClientTicketWindow class' category: 'TusLibrosClientDemo'!
TusLibrosClientTicketWindow class
	instanceVariableNames: ''!

!TusLibrosClientTicketWindow class methodsFor: 'instance creation' stamp: 'ENC 7/6/2021 20:50:19'!
openWith: aUsername password: aPassword ticket: aCartID 
	^self new initializeOpenWith: aUsername password: aPassword ticket: aCartID. ! !


!classDefinition: #TusLibrosClientCatalogWindowModel category: 'TusLibrosClientDemo'!
Object subclass: #TusLibrosClientCatalogWindowModel
	instanceVariableNames: 'cartItems catalog addQuantity removeQuantity username password cartID cartItemIndex catalogItemIndex restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientCatalogWindowModel methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:48:57'!
initializeWith: aUsername password: aPassword for: aCartID 

	username := aUsername.
	password := aPassword.
	cartID := aCartID.

	cartItems := OrderedCollection new.
	addQuantity := 0.
	removeQuantity := 0.
	cartItemIndex := 1.
	catalogItemIndex := 1.
	
	restInterface := TusLibrosRestInterface new.
	
	"Ask just once for the complete catalog to the interface"
	catalog := restInterface sendCatalogRequest.
	
	! !


!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:47:34'!
addQuantity

	^ addQuantity printString! !

!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:47:42'!
addQuantity: aQuantity

	[ 
		addQuantity := (aQuantity asNumber) 
	] on: Error do: [ :anError |
		addQuantity := 0.
	]. 
	! !

!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:47:52'!
cartID

	^ cartID! !

!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:47:58'!
removeQuantity

	^ removeQuantity printString! !

!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:48:05'!
removeQuantity: aQuantity

	[
		removeQuantity := aQuantity asNumber 
	] on: Error do: [ :anError |
		removeQuantity := 0.
	]. 
	
	! !

!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:48:11'!
username

	^ username
	 ! !

!TusLibrosClientCatalogWindowModel methodsFor: 'TextModelMorphSelector' stamp: 'ENC 7/8/2021 14:48:14'!
username: aUsername

	username := aUsername.
	 ! !


!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:45:48'!
addToCart

	| isbn |

	[
		isbn := (catalog keys at: catalogItemIndex).
		
		restInterface sendAddToCartRequestWith: cartID book: isbn quantity: addQuantity.
		
		cartItems := (restInterface sendListCartRequestWith: cartID) asOrderedCollection. 
		self triggerEvent: #cartUpdate with: self.
			
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Cannot add book to cart' title: 'Add book' .
	].! !

!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:46:15'!
checkOutCartRequest

	| ticket |
	
	[
		ticket := restInterface sendCheckOutCartRequestWith: cartID.
		self triggerEvent: #close with: self.
		
		TusLibrosClientTicketWindow openWith: username password: password ticket: ticket.
		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'There was an error with the purchase' title: 'Checkout' .
	].
	
	
	! !

!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/6/2021 22:05:14'!
listPurchasesRequest
	
	| purchases |

	purchases := restInterface sendListPurchasesFor: username password: password.
	TusLibrosClientPurchasesWindow openWith: username password: password purchases: purchases.! !

!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 14:47:21'!
removeFromCart
	
	| isbn |
	
	[
		isbn := ((OrderedCollection withAll: (Set withAll:cartItems)) at: cartItemIndex).
		
		restInterface sendRemoveFromCartRequestWith: cartID book: isbn quantity: removeQuantity.
		
		cartItems := (restInterface sendListCartRequestWith: cartID) asOrderedCollection. 
		self triggerEvent: #cartUpdate with: self.
		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Cannot remove the book' title: 'Remove book' .
	].
	! !


!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:45:23'!
cartItemIndex

	^ cartItemIndex
	 ! !

!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:45:17'!
cartItemIndex: anIndex

	cartItemIndex := anIndex.
	^ true.
	 ! !

!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:45:11'!
cartItems

	| setOfItems items |

	items := OrderedCollection new.
	
	setOfItems := OrderedCollection withAll: (Set withAll: cartItems).
	setOfItems do: [ :isbn | 
		items add: isbn, ' (', (cartItems occurrencesOf: isbn) printString, ')'.
	].
	
	^ items
	 ! !

!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:43:44'!
catalogItemIndex

	^ catalogItemIndex
	 ! !

!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:43:39'!
catalogItemIndex: anIndex

	catalogItemIndex := anIndex.
	^ true.
	 ! !

!TusLibrosClientCatalogWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:43:28'!
catalogItems

	| catalogItems |

	catalogItems := OrderedCollection new.
	catalog keysDo: [ :isbn | | price title |
		price := (catalog at: isbn) at: 'price'.
		title := (catalog at: isbn) at: 'title'.
		
		catalogItems add: isbn, ' - ', title, '  ($', (price printString),  ')'.
	].
	
	^catalogItems	 ! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosClientCatalogWindowModel class' category: 'TusLibrosClientDemo'!
TusLibrosClientCatalogWindowModel class
	instanceVariableNames: ''!

!TusLibrosClientCatalogWindowModel class methodsFor: 'instance creation' stamp: 'ENC 7/1/2021 23:57:59'!
with: aUsername password: aPassword for: aCartID
	^self new initializeWith: aUsername password: aPassword for: aCartID ! !


!classDefinition: #TusLibrosClientCreateCartWindowModel category: 'TusLibrosClientDemo'!
Object subclass: #TusLibrosClientCreateCartWindowModel
	instanceVariableNames: 'username password restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientCreateCartWindowModel methodsFor: 'PluggableButtonSelectors' stamp: 'ENC 7/8/2021 16:12:46'!
sendCreateCartRequest
	
	| cartID |
	
	[
		cartID := restInterface sendCreateCartRequestWith: username password: password.
		TusLibrosClientCatalogWindow openWith: username password: password for: cartID.		
	] on: Error do: [ :anError |
		TusLibrosClientErrorWindow openWith: 'Not valid credentials' title: 'create cart' .
	].
	! !


!TusLibrosClientCreateCartWindowModel methodsFor: 'TextModelMorphSelectors' stamp: 'ENC 7/8/2021 14:57:08'!
password

	^ password! !

!TusLibrosClientCreateCartWindowModel methodsFor: 'TextModelMorphSelectors' stamp: 'ENC 7/8/2021 14:57:13'!
password: aPassword
	
	password := aPassword.
	^ true.! !

!TusLibrosClientCreateCartWindowModel methodsFor: 'TextModelMorphSelectors' stamp: 'ENC 7/8/2021 14:57:17'!
username
	
	^ username! !

!TusLibrosClientCreateCartWindowModel methodsFor: 'TextModelMorphSelectors' stamp: 'ENC 7/8/2021 14:57:23'!
username: aUsername
	
	username := aUsername.
	^ true.! !


!TusLibrosClientCreateCartWindowModel methodsFor: 'initialization' stamp: 'ENC 7/1/2021 19:22:21'!
initialize

	username := ''.
	password := ''.
	restInterface := TusLibrosRestInterface new. 
	! !


!classDefinition: #TusLibrosClientPurchasesWindowModel category: 'TusLibrosClientDemo'!
Object subclass: #TusLibrosClientPurchasesWindowModel
	instanceVariableNames: 'purchases username password purchaseIndex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientPurchasesWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:59:53'!
purchaseIndex

	^ purchaseIndex ! !

!TusLibrosClientPurchasesWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 14:59:57'!
purchaseIndex: anIndex
	
	purchaseIndex := anIndex.
	^ true.! !

!TusLibrosClientPurchasesWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:00:26'!
purchases
	
	| purchasesItems |
	
	purchasesItems := OrderedCollection new.
	purchases keysDo: [ :isbn | | quantity total |
		quantity := (purchases at: isbn) at:'quantity'.
		total := (purchases at: isbn) at:'total'.
	
		purchasesItems add: isbn, '(', (quantity printString), ')', ' total: $', (total printString).
	].
	
	^ purchasesItems	 ! !


!TusLibrosClientPurchasesWindowModel methodsFor: 'initialization' stamp: 'ENC 7/8/2021 14:59:46'!
initializeWith: aUsername password: aPassword purchases: aListOfPurchases

	username := aUsername.
	password:= aPassword.
	purchases := aListOfPurchases .
	purchaseIndex := 1.! !


!TusLibrosClientPurchasesWindowModel methodsFor: 'LabelModelMorphSelector' stamp: 'ENC 7/8/2021 15:00:37'!
total

	| total |
	
	total := 0.
	purchases keysDo:[ :isbn | 
		total := total + ((purchases at: isbn) at: 'total') asNumber
	]. 
	
	^ total printString.! !

!TusLibrosClientPurchasesWindowModel methodsFor: 'LabelModelMorphSelector' stamp: 'ENC 7/8/2021 15:00:42'!
username
	
	^ username! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosClientPurchasesWindowModel class' category: 'TusLibrosClientDemo'!
TusLibrosClientPurchasesWindowModel class
	instanceVariableNames: ''!

!TusLibrosClientPurchasesWindowModel class methodsFor: 'instance creation' stamp: 'ENC 7/6/2021 22:12:24'!
with: aUsername password: aPassword purchases: aListOfPurchases
	^self new initializeWith: aUsername password: aPassword purchases: aListOfPurchases. ! !


!classDefinition: #TusLibrosClientTicketWindowModel category: 'TusLibrosClientDemo'!
Object subclass: #TusLibrosClientTicketWindowModel
	instanceVariableNames: 'username password ticket ticketLineIndex restInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosClientTicketWindowModel methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:01:27'!
initializeWith: aUsername password: aPassword ticket: aTicket

	username := aUsername.
	password := aPassword.
	ticket := aTicket.

	ticketLineIndex := 1.
	restInterface := TusLibrosRestInterface new.! !


!TusLibrosClientTicketWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:01:33'!
ticket

	| ticketItems |

	ticketItems := OrderedCollection new.
	ticket keysDo: [:isbn | | quantity total |
		quantity := (ticket at: isbn) at: 'quantity'.
		total := (ticket at: isbn) at: 'total'.

		ticketItems add: isbn, ' (', (quantity printString), ') ', ' total: $', (total printString).
	].
	
	^ticketItems	 ! !

!TusLibrosClientTicketWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:01:44'!
ticketLineIndex
	
	^ ticketLineIndex.
	! !

!TusLibrosClientTicketWindowModel methodsFor: 'PluggableListSelector' stamp: 'ENC 7/8/2021 15:01:39'!
ticketLineIndex: anIndex

	ticketLineIndex := anIndex.
	^ true.
	! !


!TusLibrosClientTicketWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 16:06:36'!
createNewCart

	| cartID |
	
	self triggerEvent: #close with: self.
	cartID := restInterface sendCreateCartRequestWith: username password: password.
	
	TusLibrosClientCatalogWindow openWith: username password: password for: cartID.! !

!TusLibrosClientTicketWindowModel methodsFor: 'PluggableButtonSelector' stamp: 'ENC 7/8/2021 15:01:51'!
logOut

	self triggerEvent: #close with: self.! !


!TusLibrosClientTicketWindowModel methodsFor: 'LabelModelMorphSelector' stamp: 'ENC 7/8/2021 15:01:59'!
total

	| total |
	
	total := 0.
	ticket keysDo:[:isbn | 
		total := total + ((ticket at: isbn) at: 'total') asNumber
	]. 
	
	^ total printString.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TusLibrosClientTicketWindowModel class' category: 'TusLibrosClientDemo'!
TusLibrosClientTicketWindowModel class
	instanceVariableNames: ''!

!TusLibrosClientTicketWindowModel class methodsFor: 'instance creation' stamp: 'ENC 7/6/2021 20:53:17'!
with: aUsername password: aPassword with: aTicket
	^self new initializeWith: aUsername password: aPassword ticket: aTicket.! !


!classDefinition: #TusLibrosRestInterface category: 'TusLibrosClientDemo'!
Object subclass: #TusLibrosRestInterface
	instanceVariableNames: 'port'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosClientDemo'!

!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'ENC 7/8/2021 16:15:40'!
port
	
	^ port ifNil: [ port := 8082 ].! !

!TusLibrosRestInterface methodsFor: 'initialization' stamp: 'ENC 7/8/2021 15:02:12'!
url
	
	^ 'http://localhost:', self port asString! !


!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 14:37:22'!
send: aFieldDict to: anEndpoint 

	| response |
	
	response := WebClient htmlSubmit: (self url, anEndpoint) fields: aFieldDict.
	
	response isSuccess 
		ifTrue: [ ^(WebUtils jsonDecode: ((response content) readStream)). ] 
		ifFalse: [ ^self error: response content ].! !

!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:02:50'!
sendAddToCartRequestWith: aCartID book: aBook quantity: aQuantity
	
	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'quantity'. aQuantity. 'id'. aCartID. 'isbn'. aBook.}.		
	
	^ self send: fieldDict to: '/addToCart'.! !

!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:03:25'!
sendCatalogRequest
	
	^ self send: Dictionary new to: '/catalog'.! !

!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:03:49'!
sendCheckOutCartRequestWith: aCartID 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {	'id'. aCartID.}.		
		
	^ self send: fieldDict to: '/checkOut'.! !

!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 16:09:57'!
sendCreateCartRequestWith: aUsername password: aPassword

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'username'. aUsername. 'password'. aPassword.}.		
	
	^ self send: fieldDict to: '/createCart'! !

!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:04:22'!
sendListCartRequestWith: aCartID 

	| fieldDict |

	fieldDict := Dictionary newFromPairs: {	'id'. aCartID.}.		
	
	^ self send: fieldDict to: '/listCart'! !

!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:04:39'!
sendListPurchasesFor: aUsername password: aPassword
	
	| fieldDict |

	fieldDict := Dictionary newFromPairs: {	'username'. aUsername. 'password'. aPassword }.		
	
	^ self send: fieldDict to: '/listPurchases'! !

!TusLibrosRestInterface methodsFor: 'sending requests' stamp: 'ENC 7/8/2021 15:05:10'!
sendRemoveFromCartRequestWith: aCartID book: aBook quantity: aQuantity
	
	| fieldDict |

	fieldDict := Dictionary newFromPairs: {'quantity'. aQuantity. 'id'. aCartID. 'isbn'. aBook.}.		
	
	^ self send: fieldDict to: '/removeFromCart'! !
